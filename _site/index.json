{
  "api/NanoSockets.Address.html": {
    "href": "api/NanoSockets.Address.html",
    "title": "Struct Address | Netick Networking Engine",
    "keywords": "Struct Address Namespace NanoSockets Assembly Netick.dll public struct Address : IEquatable<Address>, IEndPoint Implements IEquatable<Address> IEndPoint Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Port public ushort Port Field Value ushort address0 public ulong address0 Field Value ulong address1 public ulong address1 Field Value ulong port public ushort port Field Value ushort Methods CreateFromIpPort(string, ushort) public static Address CreateFromIpPort(string ip, ushort port) Parameters ip string port ushort Returns Address Equals(Address) public bool Equals(Address other) Parameters other Address Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string"
  },
  "api/NanoSockets.Socket.html": {
    "href": "api/NanoSockets.Socket.html",
    "title": "Struct Socket | Netick Networking Engine",
    "keywords": "Struct Socket Namespace NanoSockets Assembly Netick.dll public struct Socket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IsCreated public bool IsCreated { get; } Property Value bool"
  },
  "api/NanoSockets.Status.html": {
    "href": "api/NanoSockets.Status.html",
    "title": "Enum Status | Netick Networking Engine",
    "keywords": "Enum Status Namespace NanoSockets Assembly Netick.dll public enum Status Fields Error = -1 OK = 0"
  },
  "api/NanoSockets.UDP.html": {
    "href": "api/NanoSockets.UDP.html",
    "title": "Class UDP | Netick Networking Engine",
    "keywords": "Class UDP Namespace NanoSockets Assembly Netick.dll public static class UDP Inheritance object UDP Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields hostNameSize public const int hostNameSize = 1025 Field Value int Methods Bind(Socket, ref Address) public static extern int Bind(Socket socket, ref Address address) Parameters socket Socket address Address Returns int Bind(Socket, IntPtr) public static extern int Bind(Socket socket, IntPtr address) Parameters socket Socket address IntPtr Returns int Connect(Socket, ref Address) public static extern int Connect(Socket socket, ref Address address) Parameters socket Socket address Address Returns int Create(int, int) public static extern Socket Create(int sendBufferSize, int receiveBufferSize) Parameters sendBufferSize int receiveBufferSize int Returns Socket Deinitialize() public static extern void Deinitialize() Destroy(ref Socket) public static extern void Destroy(ref Socket socket) Parameters socket Socket GetAddress(Socket, ref Address) public static extern Status GetAddress(Socket socket, ref Address address) Parameters socket Socket address Address Returns Status GetHostName(ref Address, IntPtr, int) public static extern Status GetHostName(ref Address address, IntPtr name, int nameLength) Parameters address Address name IntPtr nameLength int Returns Status GetHostName(ref Address, StringBuilder, int) public static extern Status GetHostName(ref Address address, StringBuilder name, int nameLength) Parameters address Address name StringBuilder nameLength int Returns Status GetIP(ref Address, IntPtr, int) public static extern Status GetIP(ref Address address, IntPtr ip, int ipLength) Parameters address Address ip IntPtr ipLength int Returns Status GetIP(ref Address, StringBuilder, int) public static extern Status GetIP(ref Address address, StringBuilder ip, int ipLength) Parameters address Address ip StringBuilder ipLength int Returns Status GetOption(Socket, int, int, ref int, ref int) public static extern Status GetOption(Socket socket, int level, int optionName, ref int optionValue, ref int optionLength) Parameters socket Socket level int optionName int optionValue int optionLength int Returns Status Initialize() public static extern Status Initialize() Returns Status IsEqual(ref Address, ref Address) public static extern Status IsEqual(ref Address left, ref Address right) Parameters left Address right Address Returns Status Poll(Socket, long) public static extern int Poll(Socket socket, long timeout) Parameters socket Socket timeout long Returns int Receive(Socket, ref Address, byte[], int) public static extern int Receive(Socket socket, ref Address address, byte[] buffer, int bufferLength) Parameters socket Socket address Address buffer byte[] bufferLength int Returns int Receive(Socket, ref Address, byte[], int, int) public static extern int Receive(Socket socket, ref Address address, byte[] buffer, int offset, int bufferLength) Parameters socket Socket address Address buffer byte[] offset int bufferLength int Returns int Receive(Socket, ref Address, IntPtr, int) public static extern int Receive(Socket socket, ref Address address, IntPtr buffer, int bufferLength) Parameters socket Socket address Address buffer IntPtr bufferLength int Returns int Receive(Socket, IntPtr, byte[], int) public static extern int Receive(Socket socket, IntPtr address, byte[] buffer, int bufferLength) Parameters socket Socket address IntPtr buffer byte[] bufferLength int Returns int Receive(Socket, IntPtr, byte[], int, int) public static extern int Receive(Socket socket, IntPtr address, byte[] buffer, int offset, int bufferLength) Parameters socket Socket address IntPtr buffer byte[] offset int bufferLength int Returns int Receive(Socket, IntPtr, IntPtr, int) public static extern int Receive(Socket socket, IntPtr address, IntPtr buffer, int bufferLength) Parameters socket Socket address IntPtr buffer IntPtr bufferLength int Returns int Send(Socket, ref Address, byte[], int) public static extern int Send(Socket socket, ref Address address, byte[] buffer, int bufferLength) Parameters socket Socket address Address buffer byte[] bufferLength int Returns int Send(Socket, ref Address, byte[], int, int) public static extern int Send(Socket socket, ref Address address, byte[] buffer, int offset, int bufferLength) Parameters socket Socket address Address buffer byte[] offset int bufferLength int Returns int Send(Socket, ref Address, IntPtr, int) public static extern int Send(Socket socket, ref Address address, IntPtr buffer, int bufferLength) Parameters socket Socket address Address buffer IntPtr bufferLength int Returns int Send(Socket, IntPtr, byte[], int) public static extern int Send(Socket socket, IntPtr address, byte[] buffer, int bufferLength) Parameters socket Socket address IntPtr buffer byte[] bufferLength int Returns int Send(Socket, IntPtr, byte[], int, int) public static extern int Send(Socket socket, IntPtr address, byte[] buffer, int offset, int bufferLength) Parameters socket Socket address IntPtr buffer byte[] offset int bufferLength int Returns int Send(Socket, IntPtr, IntPtr, int) public static extern int Send(Socket socket, IntPtr address, IntPtr buffer, int bufferLength) Parameters socket Socket address IntPtr buffer IntPtr bufferLength int Returns int SetDontFragment(Socket) public static extern Status SetDontFragment(Socket socket) Parameters socket Socket Returns Status SetHostName(ref Address, IntPtr) public static extern Status SetHostName(ref Address address, IntPtr name) Parameters address Address name IntPtr Returns Status SetHostName(ref Address, string) public static extern Status SetHostName(ref Address address, string name) Parameters address Address name string Returns Status SetIP(ref Address, IntPtr) public static extern Status SetIP(ref Address address, IntPtr ip) Parameters address Address ip IntPtr Returns Status SetIP(ref Address, string) public static extern Status SetIP(ref Address address, string ip) Parameters address Address ip string Returns Status SetNonBlocking(Socket, bool) public static Status SetNonBlocking(Socket socket, bool shouldBlock = false) Parameters socket Socket shouldBlock bool Returns Status SetOption(Socket, int, int, ref int, int) public static extern Status SetOption(Socket socket, int level, int optionName, ref int optionValue, int optionLength) Parameters socket Socket level int optionName int optionValue int optionLength int Returns Status"
  },
  "api/NanoSockets.html": {
    "href": "api/NanoSockets.html",
    "title": "Namespace NanoSockets | Netick Networking Engine",
    "keywords": "Namespace NanoSockets Classes UDP Structs Address Socket Enums Status"
  },
  "api/Netick.Accumulator.html": {
    "href": "api/Netick.Accumulator.html",
    "title": "Class Accumulator | Netick Networking Engine",
    "keywords": "Class Accumulator Namespace Netick Assembly Netick.dll public sealed class Accumulator Inheritance object Accumulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Accumulator(int) public Accumulator(int windowSize) Parameters windowSize int Properties Avg public float Avg { get; } Property Value float Latest public float Latest { get; } Property Value float Methods Add(int) public void Add(int amount) Parameters amount int Add(float) public void Add(float amount) Parameters amount float Reset() public void Reset() Stop() public void Stop() Update(float) public void Update(float delta) Parameters delta float"
  },
  "api/Netick.Allocator.MemoryPool.html": {
    "href": "api/Netick.Allocator.MemoryPool.html",
    "title": "Struct Allocator.MemoryPool | Netick Networking Engine",
    "keywords": "Struct Allocator.MemoryPool Namespace Netick Assembly Netick.dll public struct Allocator.MemoryPool Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ByteSize public long ByteSize Field Value long Ptr public void* Ptr Field Value void*"
  },
  "api/Netick.Allocator.html": {
    "href": "api/Netick.Allocator.html",
    "title": "Class Allocator | Netick Networking Engine",
    "keywords": "Class Allocator Namespace Netick Assembly Netick.dll public sealed class Allocator Inheritance object Allocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Pools public List<Allocator.MemoryPool> Pools Field Value List<Allocator.MemoryPool> Methods AddNewPool() public void AddNewPool() CopyTo(Allocator) public void CopyTo(Allocator dest) Parameters dest Allocator ~Allocator() protected ~Allocator() Free(void*) public void Free(void* ptr) Parameters ptr void* Malloc(ulong, out int, out long) public void* Malloc(ulong size, out int poolIndex, out long offset) Parameters size ulong poolIndex int offset long Returns void* SafeMalloc(ulong, out int, out long) public void* SafeMalloc(ulong size, out int poolIndex, out long offset) Parameters size ulong poolIndex int offset long Returns void*"
  },
  "api/Netick.BadPacketException.html": {
    "href": "api/Netick.BadPacketException.html",
    "title": "Class BadPacketException | Netick Networking Engine",
    "keywords": "Class BadPacketException Namespace Netick Assembly Netick.dll public sealed class BadPacketException : Exception, ISerializable Inheritance object Exception BadPacketException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object)"
  },
  "api/Netick.BitBuffer.html": {
    "href": "api/Netick.BitBuffer.html",
    "title": "Class BitBuffer | Netick Networking Engine",
    "keywords": "Class BitBuffer Namespace Netick Assembly Netick.dll public sealed class BitBuffer Inheritance object BitBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BitBuffer(int, bool) public BitBuffer(int capacity = 875, bool createChunks = true) Parameters capacity int createChunks bool Fields WritePos public int WritePos Field Value int readPosition public int readPosition Field Value int Properties IsFinished public bool IsFinished { get; } Property Value bool Methods Add(int, uint) public void Add(int numBits, uint vvv) Parameters numBits int vvv uint AddBool(bool) public BitBuffer AddBool(bool value) Parameters value bool Returns BitBuffer AddByte(byte) public BitBuffer AddByte(byte value) Parameters value byte Returns BitBuffer AddInt(int) public void AddInt(int value) Parameters value int AddInt3(int) public void AddInt3(int value) Parameters value int AddLong(long) public BitBuffer AddLong(long value) Parameters value long Returns BitBuffer AddShort(short) public BitBuffer AddShort(short value) Parameters value short Returns BitBuffer AddString(string) public BitBuffer AddString(string value) Parameters value string Returns BitBuffer AddUInt(uint) public void AddUInt(uint value) Parameters value uint AddUInt3(uint) public void AddUInt3(uint value) Parameters value uint AddULong(ulong) public BitBuffer AddULong(ulong value) Parameters value ulong Returns BitBuffer AddUShort(ushort) public BitBuffer AddUShort(ushort value) Parameters value ushort Returns BitBuffer Clear() public void Clear() ~BitBuffer() protected ~BitBuffer() FlexAddUInt(uint, uint, uint, int) public void FlexAddUInt(uint value, uint x1, uint x2, int stepSize) Parameters value uint x1 uint x2 uint stepSize int FlexReadUInt_(uint, uint, int) public uint FlexReadUInt_(uint x1, uint x2, int stepSize) Parameters x1 uint x2 uint stepSize int Returns uint Insert(int, int, uint) public void Insert(int position, int numBits, uint value) Parameters position int numBits int value uint Length() public int Length() Returns int Peek(int) public uint Peek(int numBits) Parameters numBits int Returns uint PeekBool() public bool PeekBool() Returns bool PeekByte() public byte PeekByte() Returns byte PeekInt() public int PeekInt() Returns int PeekLong() public long PeekLong() Returns long PeekShort() public short PeekShort() Returns short PeekUInt() public uint PeekUInt() Returns uint PeekULong() public ulong PeekULong() Returns ulong PeekUShort() public ushort PeekUShort() Returns ushort Read(int) public uint Read(int numBits) Parameters numBits int Returns uint ReadBool() public bool ReadBool() Returns bool ReadByte() public byte ReadByte() Returns byte ReadInt() public int ReadInt() Returns int ReadInt3() public int ReadInt3() Returns int ReadLong() public long ReadLong() Returns long ReadShort() public short ReadShort() Returns short ReadString() public string ReadString() Returns string ReadUInt() public uint ReadUInt() Returns uint ReadUInt3() public uint ReadUInt3() Returns uint ReadULong() public ulong ReadULong() Returns ulong ReadUShort() public ushort ReadUShort() Returns ushort SetFrom(byte*, int, int) public void SetFrom(byte* source, int len, int bufferSize) Parameters source byte* len int bufferSize int"
  },
  "api/Netick.ChangedInfo.html": {
    "href": "api/Netick.ChangedInfo.html",
    "title": "Struct ChangedInfo | Netick Networking Engine",
    "keywords": "Struct ChangedInfo Namespace Netick Assembly Netick.dll public struct ChangedInfo : IEquatable<ChangedInfo> Implements IEquatable<ChangedInfo> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Behaviour public INetickNetworkScript Behaviour Field Value INetickNetworkScript Methods Equals(ChangedInfo) public bool Equals(ChangedInfo other) Parameters other ChangedInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetBehaviour<T>() public T GetBehaviour<T>() where T : INetickScript Returns T Type Parameters T GetHashCode() public override int GetHashCode() Returns int GetPreviousValue<T>() public T GetPreviousValue<T>() where T : unmanaged Returns T Type Parameters T"
  },
  "api/Netick.ChangedInfoExtension.html": {
    "href": "api/Netick.ChangedInfoExtension.html",
    "title": "Class ChangedInfoExtension | Netick Networking Engine",
    "keywords": "Class ChangedInfoExtension Namespace Netick Assembly Netick.Unity.dll public static class ChangedInfoExtension Inheritance object ChangedInfoExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBehaviour<T>(ChangedInfo) public static T GetBehaviour<T>(this ChangedInfo change) where T : NetworkBehaviour Parameters change ChangedInfo Returns T Type Parameters T"
  },
  "api/Netick.ChangedMethod.html": {
    "href": "api/Netick.ChangedMethod.html",
    "title": "Struct ChangedMethod | Netick Networking Engine",
    "keywords": "Struct ChangedMethod Namespace Netick Assembly Netick.dll public struct ChangedMethod Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChangedMethod(int, int, int, OnChangedEvent) public ChangedMethod(int propertyIndex, int propertySize, int behaviourIndex, OnChangedEvent evnt) Parameters propertyIndex int propertySize int behaviourIndex int evnt OnChangedEvent"
  },
  "api/Netick.CircularList-1.html": {
    "href": "api/Netick.CircularList-1.html",
    "title": "Class CircularList<T> | Netick Networking Engine",
    "keywords": "Class CircularList<T> Namespace Netick Assembly Netick.dll public class CircularList<T> Type Parameters T Inheritance object CircularList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircularList(int) public CircularList(int capacity) Parameters capacity int Properties Capacity public int Capacity { get; } Property Value int Count public int Count { get; } Property Value int HeadIndex public int HeadIndex { get; } Property Value int this[int] public T this[int i] { get; set; } Parameters i int Property Value T Methods Add(T) public void Add(T item) Parameters item T Clear() public void Clear() GetArray() public T[] GetArray() Returns T[] Reset(int, int) public void Reset(int headIndex, int count) Parameters headIndex int count int"
  },
  "api/Netick.Client.html": {
    "href": "api/Netick.Client.html",
    "title": "Class Client | Netick Networking Engine",
    "keywords": "Class Client Namespace Netick Assembly Netick.dll public class Client : NetworkPeer Inheritance object NetworkPlayer NetworkPeer Client Inherited Members NetworkPeer.OnConnectRequest(byte[], int, IPEndPoint) NetworkPlayer.Engine NetworkPlayer.Position NetworkPlayer.CellPosition NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(NetickEngine, NetworkTransport) public Client(NetickEngine engine, NetworkTransport transport) Parameters engine NetickEngine transport NetworkTransport Fields ConnectedServer public readonly ClientConnection ConnectedServer Field Value ClientConnection DumbClient public bool DumbClient Field Value bool Peer public readonly NetworkPeer Peer Field Value NetworkPeer Properties InKBps public override float InKBps { get; } Property Value float IsConnected public bool IsConnected { get; } Property Value bool OutKBps public override float OutKBps { get; } Property Value float Methods Connect(int, string, byte[], int) public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int ip string connectionData byte[] connectionDataLength int Disconnect() public void Disconnect() OnConnectFailed(ConnectionFailedReason) public override void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnected(TransportConnection) public override void OnConnected(TransportConnection peer) Parameters peer TransportConnection OnDisconnected(TransportConnection, TransportDisconnectReason) public override void OnDisconnected(TransportConnection peer, TransportDisconnectReason transportDisconnectReason) Parameters peer TransportConnection transportDisconnectReason TransportDisconnectReason Receive(TransportConnection, BitBuffer) public override void Receive(TransportConnection connection, BitBuffer reader) Parameters connection TransportConnection reader BitBuffer"
  },
  "api/Netick.ClientConnection.html": {
    "href": "api/Netick.ClientConnection.html",
    "title": "Class ClientConnection | Netick Networking Engine",
    "keywords": "Class ClientConnection Namespace Netick Assembly Netick.dll public sealed class ClientConnection : NetworkConnection Inheritance object NetworkPlayer NetworkConnection ClientConnection Inherited Members NetworkConnection.RemoteUserData NetworkConnection.LocalUserData NetworkConnection.MaxOutgoingDataPerTickInBytes NetworkConnection.SendEntities NetworkConnection.EndPoint NetworkConnection.BytesIn NetworkConnection.BytesOut NetworkPlayer.Engine NetworkPlayer.Position NetworkPlayer.CellPosition NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ClientConnection(int, TransportConnection, NetickEngine) public ClientConnection(int clientIndex, TransportConnection peer, NetickEngine sandox) Parameters clientIndex int peer TransportConnection sandox NetickEngine"
  },
  "api/Netick.ClientData.html": {
    "href": "api/Netick.ClientData.html",
    "title": "Class ClientData | Netick Networking Engine",
    "keywords": "Class ClientData Namespace Netick Assembly Netick.dll public class ClientData Inheritance object ClientData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CurrentInput public SimulationInput CurrentInput Field Value SimulationInput"
  },
  "api/Netick.ClientSimulation.html": {
    "href": "api/Netick.ClientSimulation.html",
    "title": "Class ClientSimulation | Netick Networking Engine",
    "keywords": "Class ClientSimulation Namespace Netick Assembly Netick.dll public sealed class ClientSimulation : Simulation Inheritance object Simulation ClientSimulation Inherited Members Simulation.FetchInputLocal<T>(out T) Simulation.GetInput<T>() Simulation.SetInput<T>(T) Simulation.CurrentInput object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsResimulating public bool IsResimulating { get; set; } Property Value bool ResimulationStep public int ResimulationStep { get; set; } Property Value int Resimulatios public int Resimulatios { get; set; } Property Value int"
  },
  "api/Netick.ComponentExtensions.html": {
    "href": "api/Netick.ComponentExtensions.html",
    "title": "Class ComponentExtensions | Netick Networking Engine",
    "keywords": "Class ComponentExtensions Namespace Netick Assembly Netick.Unity.dll public static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NetworkPlay(AudioSource, NetworkSandbox, ulong) public static void NetworkPlay(this AudioSource audioSource, NetworkSandbox sandbox, ulong delay = 0) Parameters audioSource AudioSource sandbox NetworkSandbox delay ulong NetworkPlayOneShot(AudioSource, NetworkSandbox, AudioClip, float) public static void NetworkPlayOneShot(this AudioSource audioSource, NetworkSandbox sandbox, AudioClip clip, float volumeScale = 1) Parameters audioSource AudioSource sandbox NetworkSandbox clip AudioClip volumeScale float NetworkPlayScheduled(AudioSource, NetworkSandbox, double) public static void NetworkPlayScheduled(this AudioSource audioSource, NetworkSandbox sandbox, double time) Parameters audioSource AudioSource sandbox NetworkSandbox time double SetEnabled(Component, NetworkSandbox, bool) public static void SetEnabled(this Component comp, NetworkSandbox sandbox, bool value) Parameters comp Component sandbox NetworkSandbox value bool"
  },
  "api/Netick.Connection.html": {
    "href": "api/Netick.Connection.html",
    "title": "Class Connection | Netick Networking Engine",
    "keywords": "Class Connection Namespace Netick Assembly Netick.dll public class Connection Inheritance object Connection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Connection(CustomizableSocketTransport, int) public Connection(CustomizableSocketTransport transprt, int index) Parameters transprt CustomizableSocketTransport index int Properties Address public IEndPoint Address { get; } Property Value IEndPoint Id public int Id { get; } Property Value int Mtu public int Mtu { get; } Property Value int Transprt public CustomizableSocketTransport Transprt { get; } Property Value CustomizableSocketTransport Methods Send(BitBuffer) public void Send(BitBuffer buffer) Parameters buffer BitBuffer Send(IntPtr, int) public void Send(IntPtr ptr, int len) Parameters ptr IntPtr len int"
  },
  "api/Netick.ConnectionFailedReason.html": {
    "href": "api/Netick.ConnectionFailedReason.html",
    "title": "Enum ConnectionFailedReason | Netick Networking Engine",
    "keywords": "Enum ConnectionFailedReason Namespace Netick Assembly Netick.dll public enum ConnectionFailedReason Fields Refused = 1 Timeout = 0"
  },
  "api/Netick.ConsoleLogger.html": {
    "href": "api/Netick.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Netick Networking Engine",
    "keywords": "Class ConsoleLogger Namespace Netick Assembly Netick.dll public class ConsoleLogger : INetickLogger Inheritance object ConsoleLogger Implements INetickLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsoleLogger() public ConsoleLogger() Methods Log(object) public void Log(object message) Parameters message object LogError(object) public void LogError(object message) Parameters message object LogWarning(object) public void LogWarning(object message) Parameters message object"
  },
  "api/Netick.CustomizableSocketTransport.html": {
    "href": "api/Netick.CustomizableSocketTransport.html",
    "title": "Class CustomizableSocketTransport | Netick Networking Engine",
    "keywords": "Class CustomizableSocketTransport Namespace Netick Assembly Netick.dll public class CustomizableSocketTransport Inheritance object CustomizableSocketTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomizableSocketTransport(INetickSocket, int) public CustomizableSocketTransport(INetickSocket socket, int maxConnections = 64) Parameters socket INetickSocket maxConnections int Fields MaxConnections public readonly int MaxConnections Field Value int TickPeriod public readonly double TickPeriod Field Value double Timeout public double Timeout Field Value double Properties IsServer public bool IsServer { get; } Property Value bool Methods Connect(string, int) public void Connect(string ip, int port) Parameters ip string port int ~CustomizableSocketTransport() protected ~CustomizableSocketTransport() Kick(Connection) public void Kick(Connection connection) Parameters connection Connection SendPaylod(Connection, BitBuffer) public void SendPaylod(Connection connection, BitBuffer buffer) Parameters connection Connection buffer BitBuffer SendPaylod(Connection, IntPtr, int) public void SendPaylod(Connection connection, IntPtr ptr, int size) Parameters connection Connection ptr IntPtr size int Shutdown() public void Shutdown() StartClient(int, int) public void StartClient(int sendBufferSize, int receiveBufferSize) Parameters sendBufferSize int receiveBufferSize int StartServer(int, int, int) public void StartServer(int port, int sendBufferSize, int receiveBufferSize) Parameters port int sendBufferSize int receiveBufferSize int Stop() public void Stop() Update() public void Update() Events NetworkReceiveEvent public event OnNetworkReceive NetworkReceiveEvent Event Type OnNetworkReceive OnConnectFailed public event OnConnectFailed OnConnectFailed Event Type OnConnectFailed PeerConnectedEvent public event OnPeerConnected PeerConnectedEvent Event Type OnPeerConnected PeerDisconnectedEvent public event OnPeerDisconnected PeerDisconnectedEvent Event Type OnPeerDisconnected"
  },
  "api/Netick.DefaultAllocator.html": {
    "href": "api/Netick.DefaultAllocator.html",
    "title": "Class DefaultAllocator | Netick Networking Engine",
    "keywords": "Class DefaultAllocator Namespace Netick Assembly Netick.dll public class DefaultAllocator : IMemoryAllocator Inheritance object DefaultAllocator Implements IMemoryAllocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultAllocator() public DefaultAllocator() Methods Clear(void*, long) public void Clear(void* ptr, long sizeBytes) Parameters ptr void* sizeBytes long Cmp(void*, void*, long) public bool Cmp(void* ptr1, void* ptr2, long sizeBytes) Parameters ptr1 void* ptr2 void* sizeBytes long Returns bool Copy(void*, void*, long) public void Copy(void* dest, void* source, long sizeBytes) Parameters dest void* source void* sizeBytes long Free(void*) public void Free(void* ptr) Parameters ptr void* Malloc(long, int) public void* Malloc(long size, int alignment = 4) Parameters size long alignment int Returns void*"
  },
  "api/Netick.DoubleStats.html": {
    "href": "api/Netick.DoubleStats.html",
    "title": "Class DoubleStats | Netick Networking Engine",
    "keywords": "Class DoubleStats Namespace Netick Assembly Netick.dll public class DoubleStats Inheritance object DoubleStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DoubleStats(int, double, bool) public DoubleStats(int windowSize = 128, double warningThreshold = 1.7976931348623157E+308, bool lowIsBetter = true) Parameters windowSize int warningThreshold double lowIsBetter bool Properties Average public double Average { get; } Property Value double Data public CircularList<double> Data { get; } Property Value CircularList<double> Latest public double Latest { get; } Property Value double Max public double Max { get; } Property Value double Min public double Min { get; } Property Value double StdDeviation public double StdDeviation { get; } Property Value double WarningThreshold public double WarningThreshold { get; } Property Value double Methods GetData() public CircularList<double> GetData() Returns CircularList<double> IsHealthy() public bool IsHealthy() Returns bool Reset() public void Reset() Update(double) public void Update(double value) Parameters value double"
  },
  "api/Netick.Entity.html": {
    "href": "api/Netick.Entity.html",
    "title": "Class Entity | Netick Networking Engine",
    "keywords": "Class Entity Namespace Netick Assembly Netick.dll public sealed class Entity Inheritance object Entity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields BehsHash public int BehsHash Field Value int Cell public GridCellComp Cell Field Value GridCellComp Engine public NetickEngine Engine Field Value NetickEngine NetworkId public int NetworkId Field Value int ObjectMeta public NetickUniqueObjectMeta ObjectMeta Field Value NetickUniqueObjectMeta PoolIndex public int PoolIndex Field Value int Pos public NetickVector3 Pos Field Value NetickVector3 Scripts public INetickNetworkScript[] Scripts Field Value INetickNetworkScript[] State public int* State Field Value int* StateOffsetBytes public long StateOffsetBytes Field Value long StatePtr public void* StatePtr Field Value void* StateSizeWord public long StateSizeWord Field Value long UserEntity public INetickEntity UserEntity Field Value INetickEntity Properties InputSource public NetworkPlayer InputSource { get; set; } Property Value NetworkPlayer InputSourceIndex public int InputSourceIndex { get; set; } Property Value int IsExplicitlyPredicted public bool IsExplicitlyPredicted { get; set; } Property Value bool IsInputSource public bool IsInputSource { get; } Property Value bool IsOwner public bool IsOwner { get; } Property Value bool IsPredicted public bool IsPredicted { get; } Property Value bool IsProxy public bool IsProxy { get; } Property Value bool IsResimulating public bool IsResimulating { get; } Property Value bool Methods Dirtify(int*, int) public bool Dirtify(int* p, int is64bits = 0) Parameters p int* is64bits int Returns bool Dirtify(int*, int*, int, int, int) public void Dirtify(int* newValue, int* p, int size, int hasOnChanged, int is64bits = 0) Parameters newValue int* p int* size int hasOnChanged int is64bits int EngineIntoNetcode() public void EngineIntoNetcode() GetStateSizeWords(INetickNetworkScript[]) public static int GetStateSizeWords(INetickNetworkScript[] scripts) Parameters scripts INetickNetworkScript[] Returns int InternalDirtify(INetickNetworkScript, int*, int*, int, int, int) public static void InternalDirtify(INetickNetworkScript script, int* data, int* p, int sizeInWords, int hasOnChanged, int is64bits = 0) Parameters script INetickNetworkScript data int* p int* sizeInWords int hasOnChanged int is64bits int InternalRegOnChanged(INetickNetworkScript, int*, int*, int, OnChangedEvent) public static void InternalRegOnChanged(INetickNetworkScript script, int* propertyStart, int* propertyPartIndex, int propertySizeWords, OnChangedEvent onChanged) Parameters script INetickNetworkScript propertyStart int* propertyPartIndex int* propertySizeWords int onChanged OnChangedEvent InternalRegSmooth(INetickNetworkScript, string, int) public static void InternalRegSmooth(INetickNetworkScript script, string propertyName, int offsetInWords) Parameters script INetickNetworkScript propertyName string offsetInWords int NetcodeIntoEngine() public void NetcodeIntoEngine() NetworkAwake() public void NetworkAwake() NetworkStart() public void NetworkStart() OnInputSourceChanged(NetworkPlayer) public void OnInputSourceChanged(NetworkPlayer previous) Parameters previous NetworkPlayer"
  },
  "api/Netick.ExecuteAfterAttribute.html": {
    "href": "api/Netick.ExecuteAfterAttribute.html",
    "title": "Class ExecuteAfterAttribute | Netick Networking Engine",
    "keywords": "Class ExecuteAfterAttribute Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class ExecuteAfterAttribute : Attribute Inheritance object Attribute ExecuteAfterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteAfterAttribute(Type) public ExecuteAfterAttribute(Type targetType) Parameters targetType Type Fields orderIncrease public int orderIncrease Field Value int targetType public Type targetType Field Value Type"
  },
  "api/Netick.ExecuteBeforeAttribute.html": {
    "href": "api/Netick.ExecuteBeforeAttribute.html",
    "title": "Class ExecuteBeforeAttribute | Netick Networking Engine",
    "keywords": "Class ExecuteBeforeAttribute Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class ExecuteBeforeAttribute : Attribute Inheritance object Attribute ExecuteBeforeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteBeforeAttribute(Type) public ExecuteBeforeAttribute(Type targetType) Parameters targetType Type Fields orderDecrease public int orderDecrease Field Value int targetType public Type targetType Field Value Type"
  },
  "api/Netick.ExecutionList.html": {
    "href": "api/Netick.ExecutionList.html",
    "title": "Class ExecutionList | Netick Networking Engine",
    "keywords": "Class ExecutionList Namespace Netick Assembly Netick.dll public sealed class ExecutionList : IEnumerable<INetickEntity>, IEnumerable Inheritance object ExecutionList Implements IEnumerable<INetickEntity> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ExecutionList(NetickEngine) public ExecutionList(NetickEngine sandbox) Parameters sandbox NetickEngine Fields Items public List<INetickEntity> Items Field Value List<INetickEntity> Properties Count public int Count { get; } Property Value int this[int] public INetickEntity this[int i] { get; set; } Parameters i int Property Value INetickEntity Methods Add(INetickEntity) public void Add(INetickEntity obj) Parameters obj INetickEntity Clear() public void Clear() GetEnumerator() public IEnumerator<INetickEntity> GetEnumerator() Returns IEnumerator<INetickEntity> Remove(INetickEntity) public void Remove(INetickEntity obj) Parameters obj INetickEntity SetFrom(List<INetickEntity>) public void SetFrom(List<INetickEntity> list) Parameters list List<INetickEntity>"
  },
  "api/Netick.ExecutionOrderAttribute.html": {
    "href": "api/Netick.ExecutionOrderAttribute.html",
    "title": "Class ExecutionOrderAttribute | Netick Networking Engine",
    "keywords": "Class ExecutionOrderAttribute Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class ExecutionOrderAttribute : Attribute Inheritance object Attribute ExecutionOrderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecutionOrderAttribute(int) public ExecutionOrderAttribute(int order) Parameters order int Fields order public int order Field Value int"
  },
  "api/Netick.FloatStats.html": {
    "href": "api/Netick.FloatStats.html",
    "title": "Class FloatStats | Netick Networking Engine",
    "keywords": "Class FloatStats Namespace Netick Assembly Netick.dll public class FloatStats Inheritance object FloatStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FloatStats(int, float, bool) public FloatStats(int windowSize = 128, float warningThreshold = 3.4028235E+38, bool lowIsBetter = true) Parameters windowSize int warningThreshold float lowIsBetter bool Properties Average public float Average { get; } Property Value float Data public CircularList<float> Data { get; } Property Value CircularList<float> Latest public float Latest { get; } Property Value float Max public float Max { get; } Property Value float Min public float Min { get; } Property Value float StdDeviation public float StdDeviation { get; } Property Value float StdDeviation2 public float StdDeviation2 { get; } Property Value float WarningThreshold public float WarningThreshold { get; } Property Value float Methods GetData() public CircularList<float> GetData() Returns CircularList<float> IsHealthy() public bool IsHealthy() Returns bool Reset() public void Reset() Update(float) public void Update(float value) Parameters value float"
  },
  "api/Netick.GeneratedBehaviourExample.html": {
    "href": "api/Netick.GeneratedBehaviourExample.html",
    "title": "Class GeneratedBehaviourExample | Netick Networking Engine",
    "keywords": "Class GeneratedBehaviourExample Namespace Netick Assembly Netick.Unity.dll public class GeneratedBehaviourExample : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour GeneratedBehaviourExample Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GeneratedBehaviourExample() public GeneratedBehaviourExample() Properties Double2Example public double Double2Example { get; set; } Property Value double DoubleExample public double DoubleExample { get; set; } Property Value double DoubleExample_ public double DoubleExample_ { get; set; } Property Value double FloatExample public float FloatExample { get; set; } Property Value float FloatExample_ public float FloatExample_ { get; set; } Property Value float IntExample public int IntExample { get; set; } Property Value int StringExample public string StringExample { get; set; } Property Value string StructExampleExample public StructExample StructExampleExample { get; set; } Property Value StructExample Methods NetworkAwake() public override void NetworkAwake() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.Grid.html": {
    "href": "api/Netick.Grid.html",
    "title": "Class Grid | Netick Networking Engine",
    "keywords": "Class Grid Namespace Netick Assembly Netick.dll public sealed class Grid Inheritance object Grid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields CellSize public readonly int CellSize Field Value int Cells public readonly GridCellComp[,] Cells Field Value GridCellComp[,] CellsCount public readonly int CellsCount Field Value int Sandbox public readonly NetickEngine Sandbox Field Value NetickEngine Methods Add(Entity, NetickVector3) public void Add(Entity newUnit, NetickVector3 pos) Parameters newUnit Entity pos NetickVector3 AddObj(Entity) public void AddObj(Entity newUnit) Parameters newUnit Entity ConvertFromWorldToCell(NetickVector3) public NetickVector2Int ConvertFromWorldToCell(NetickVector3 pos) Parameters pos NetickVector3 Returns NetickVector2Int ConvertFromWorldToCell3D(NetickVector3) public NetickVector3Int ConvertFromWorldToCell3D(NetickVector3 pos) Parameters pos NetickVector3 Returns NetickVector3Int GetEntitiesWithinAoI(NetickVector3) public List<GridCellComp> GetEntitiesWithinAoI(NetickVector3 clientPos) Parameters clientPos NetickVector3 Returns List<GridCellComp> IsPosValid2(NetickVector2Int) public bool IsPosValid2(NetickVector2Int cellPos) Parameters cellPos NetickVector2Int Returns bool Move(Entity, NetickVector3, NetickVector3) public void Move(Entity unit, NetickVector3 oldPos, NetickVector3 newPos) Parameters unit Entity oldPos NetickVector3 newPos NetickVector3 Remove(Entity) public void Remove(Entity unit) Parameters unit Entity"
  },
  "api/Netick.GridCellComp.html": {
    "href": "api/Netick.GridCellComp.html",
    "title": "Class GridCellComp | Netick Networking Engine",
    "keywords": "Class GridCellComp Namespace Netick Assembly Netick.dll public sealed class GridCellComp Inheritance object GridCellComp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields CellEntity public Entity CellEntity Field Value Entity Entities public HashSet<Entity> Entities Field Value HashSet<Entity> Position public readonly NetickVector3Int Position Field Value NetickVector3Int Methods AddObject(Entity) public void AddObject(Entity entity) Parameters entity Entity RemoveObject(Entity) public void RemoveObject(Entity entity) Parameters entity Entity"
  },
  "api/Netick.GridVisualiser.html": {
    "href": "api/Netick.GridVisualiser.html",
    "title": "Class GridVisualiser | Netick Networking Engine",
    "keywords": "Class GridVisualiser Namespace Netick Assembly Netick.Unity.dll public class GridVisualiser : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GridVisualiser Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GridVisualiser() public GridVisualiser() Fields Sandbox public NetworkSandbox Sandbox Field Value NetworkSandbox"
  },
  "api/Netick.IEndPoint.html": {
    "href": "api/Netick.IEndPoint.html",
    "title": "Interface IEndPoint | Netick Networking Engine",
    "keywords": "Interface IEndPoint Namespace Netick Assembly Netick.dll public interface IEndPoint Properties IPAddress string IPAddress { get; } Property Value string Port int Port { get; } Property Value int"
  },
  "api/Netick.IGameEngine.html": {
    "href": "api/Netick.IGameEngine.html",
    "title": "Interface IGameEngine | Netick Networking Engine",
    "keywords": "Interface IGameEngine Namespace Netick Assembly Netick.dll public interface IGameEngine Methods GetConnectionMetaSizeWords() Implements this to inform Netick about the size (in 32 bit words) of your connection meta data. int GetConnectionMetaSizeWords() Returns int GetEntityMetaSizeWords() Implements this to inform Netick about the size (in 32 bit words) of your entity meta data. int GetEntityMetaSizeWords() Returns int GetPredictionInterestList() ExecutionList GetPredictionInterestList() Returns ExecutionList OnBeforeSend(NetworkConnection) This is called before sending packets to the dest connection. void OnBeforeSend(NetworkConnection dest) Parameters dest NetworkConnection OnClientConnected() void OnClientConnected() OnClientDisconnected(TransportDisconnectReason) void OnClientDisconnected(TransportDisconnectReason transportDisconnectReason) Parameters transportDisconnectReason TransportDisconnectReason OnConnectFailed(ConnectionFailedReason) void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnEntityDespawned(Entity) This is called when an entity has been removed from the simulation. void OnEntityDespawned(Entity entity) Parameters entity Entity OnEntityMetaChanged(NetickEntityMeta, byte*) This method is called on the client when it receives new entity meta data. This must be used to create/setup network entities on the client. It can be called many times not only when the data has changed. Note: user entity meta data can be used for custom user data that might be used in creating entities. void OnEntityMetaChanged(NetickEntityMeta netickMeta, byte* userMetaData) Parameters netickMeta NetickEntityMeta userMetaData byte* OnEntityMetaChangedPhaseTwo(NetickEntityMeta, byte*) void OnEntityMetaChangedPhaseTwo(NetickEntityMeta netickMeta, byte* userMetaData) Parameters netickMeta NetickEntityMeta userMetaData byte* OnEntitySpawned(Entity) This is called when a new entity has been added to the simulation. void OnEntitySpawned(Entity entity) Parameters entity Entity OnInputRead() void OnInputRead() OnNetworkFixedUpdate() void OnNetworkFixedUpdate() OnNetworkRender() void OnNetworkRender() OnNetworkUpdate() void OnNetworkUpdate() OnPacketReceived(NetworkConnection) This is called when a full packet has been received. void OnPacketReceived(NetworkConnection source) Parameters source NetworkConnection OnPeerConnected(NetworkConnection) void OnPeerConnected(NetworkConnection connection) Parameters connection NetworkConnection OnPeerDisconnected(NetworkConnection, TransportDisconnectReason) void OnPeerDisconnected(NetworkConnection connection, TransportDisconnectReason transportDisconnectReason) Parameters connection NetworkConnection transportDisconnectReason TransportDisconnectReason PopulateEntityMeta(Entity) This is used to populate the user meta data for an entity. void PopulateEntityMeta(Entity entity) Parameters entity Entity SimulatePhysics() void SimulatePhysics() SyncTransformsToPhysics() void SyncTransformsToPhysics()"
  },
  "api/Netick.IMemoryAllocator.html": {
    "href": "api/Netick.IMemoryAllocator.html",
    "title": "Interface IMemoryAllocator | Netick Networking Engine",
    "keywords": "Interface IMemoryAllocator Namespace Netick Assembly Netick.dll public interface IMemoryAllocator Methods Clear(void*, long) void Clear(void* ptr, long sizeBytes) Parameters ptr void* sizeBytes long Cmp(void*, void*, long) bool Cmp(void* ptr1, void* ptr2, long sizeBytes) Parameters ptr1 void* ptr2 void* sizeBytes long Returns bool Copy(void*, void*, long) void Copy(void* dest, void* source, long sizeBytes) Parameters dest void* source void* sizeBytes long Free(void*) void Free(void* ptr) Parameters ptr void* Malloc(long, int) void* Malloc(long size, int alignment = 4) Parameters size long alignment int Returns void*"
  },
  "api/Netick.INetickComponent.html": {
    "href": "api/Netick.INetickComponent.html",
    "title": "Interface INetickComponent | Netick Networking Engine",
    "keywords": "Interface INetickComponent Namespace Netick Assembly Netick.dll public interface INetickComponent Methods Init(NetickEngine) void Init(NetickEngine engine) Parameters engine NetickEngine NetworkFixedUpdate() void NetworkFixedUpdate() NetworkRender() void NetworkRender() Reset() void Reset()"
  },
  "api/Netick.INetickEntity.html": {
    "href": "api/Netick.INetickEntity.html",
    "title": "Interface INetickEntity | Netick Networking Engine",
    "keywords": "Interface INetickEntity Namespace Netick Assembly Netick.dll public interface INetickEntity Properties AllScripts INetickScript[] AllScripts { get; } Property Value INetickScript[] Engine NetickEngine Engine { get; } Property Value NetickEngine Entity Entity Entity { get; } Property Value Entity NetworkeScripts INetickNetworkScript[] NetworkeScripts { get; } Property Value INetickNetworkScript[] PredictionMode Relevancy PredictionMode { get; } Property Value Relevancy Methods Initialize(NetickEngine, Entity) Used to initialize the user entity and assign Engine and Entity void Initialize(NetickEngine netickEngine, Entity entity) Parameters netickEngine NetickEngine entity Entity NetworkRegister(Tick, int, NetworkPlayer, SpawnPredictionKey) void NetworkRegister(Tick spawnTick, int id, NetworkPlayer user, SpawnPredictionKey spawnKey = default) Parameters spawnTick Tick id int user NetworkPlayer spawnKey SpawnPredictionKey NetworkUnregister() void NetworkUnregister()"
  },
  "api/Netick.INetickLogger.html": {
    "href": "api/Netick.INetickLogger.html",
    "title": "Interface INetickLogger | Netick Networking Engine",
    "keywords": "Interface INetickLogger Namespace Netick Assembly Netick.dll public interface INetickLogger Methods Log(object) void Log(object message) Parameters message object LogError(object) void LogError(object message) Parameters message object LogWarning(object) void LogWarning(object message) Parameters message object"
  },
  "api/Netick.INetickNetworkScript.html": {
    "href": "api/Netick.INetickNetworkScript.html",
    "title": "Interface INetickNetworkScript | Netick Networking Engine",
    "keywords": "Interface INetickNetworkScript Namespace Netick Assembly Netick.dll A network scripts which can have networked properties and rpcs. public interface INetickNetworkScript : INetickScript Inherited Members INetickScript.Initialize(NetickEngine) INetickScript.NetworkStart() INetickScript.NetworkDestroy() INetickScript.NetworkUpdate() INetickScript.NetworkFixedUpdate() INetickScript.NetworkRender() INetickScript.Engine Properties Entity Entity Entity { get; } Property Value Entity Index int Index { get; } Property Value int RelatedRpcs List<NetworkRpc> RelatedRpcs { get; } Property Value List<NetworkRpc> State int* State { get; } Property Value int* Methods GameEngineIntoNetcode() void GameEngineIntoNetcode() InternalGetStateSizeWords() int InternalGetStateSizeWords() Returns int InternalInit() void InternalInit() InternalReset() void InternalReset() NetcodeIntoGameEngine() void NetcodeIntoGameEngine() NetworkAwake() void NetworkAwake() NetworkReset() void NetworkReset() OnInputSourceChanged(NetworkPlayer) void OnInputSourceChanged(NetworkPlayer previous) Parameters previous NetworkPlayer OnInputSourceLeft() void OnInputSourceLeft()"
  },
  "api/Netick.INetickScript.html": {
    "href": "api/Netick.INetickScript.html",
    "title": "Interface INetickScript | Netick Networking Engine",
    "keywords": "Interface INetickScript Namespace Netick Assembly Netick.dll A script which can be added to netick internal simulation loop. public interface INetickScript Properties Engine NetickEngine Engine { get; } Property Value NetickEngine Entity Entity Entity { get; } Property Value Entity Methods Initialize(NetickEngine) Used to initialize the user script and assign Engine. void Initialize(NetickEngine netickEngine) Parameters netickEngine NetickEngine NetworkDestroy() Called when this behaviour has been removed from the simulation. void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Entity.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. void NetworkRender() NetworkStart() Called when this behaviour has been added to the simulation. void NetworkStart() NetworkUpdate() Called every frame. Executed before NetworkFixedUpdate. void NetworkUpdate()"
  },
  "api/Netick.INetickSocket.html": {
    "href": "api/Netick.INetickSocket.html",
    "title": "Interface INetickSocket | Netick Networking Engine",
    "keywords": "Interface INetickSocket Namespace Netick Assembly Netick.dll public interface INetickSocket Methods Connect(ref IEndPoint) bool Connect(ref IEndPoint address) Parameters address IEndPoint Returns bool CreateFromIpPort(string, int) IEndPoint CreateFromIpPort(string ip, int port) Parameters ip string port int Returns IEndPoint Deinitialize() void Deinitialize() Initialize() bool Initialize() Returns bool Poll() int Poll() Returns int Receive(out IEndPoint, byte*, int) int Receive(out IEndPoint address, byte* buffer, int bufferSize) Parameters address IEndPoint buffer byte* bufferSize int Returns int Send(IEndPoint, byte*, int) void Send(IEndPoint address, byte* data, int dataLength) Parameters address IEndPoint data byte* dataLength int Shutdown() void Shutdown() StartClient(long, long) void StartClient(long sendBufferSize, long receiveBufferSize) Parameters sendBufferSize long receiveBufferSize long StartServer(int, long, long) void StartServer(int port, long sendBufferSize, long receiveBufferSize) Parameters port int sendBufferSize long receiveBufferSize long"
  },
  "api/Netick.INetworkArray.html": {
    "href": "api/Netick.INetworkArray.html",
    "title": "Interface INetworkArray | Netick Networking Engine",
    "keywords": "Interface INetworkArray Namespace Netick Assembly Netick.dll public interface INetworkArray Methods InternalInit(INetickNetworkScript, int*, int) void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords) Parameters beh INetickNetworkScript state int* elementSizeWords int InternalReset() void InternalReset()"
  },
  "api/Netick.INetworkInput.html": {
    "href": "api/Netick.INetworkInput.html",
    "title": "Interface INetworkInput | Netick Networking Engine",
    "keywords": "Interface INetworkInput Namespace Netick Assembly Netick.dll public interface INetworkInput"
  },
  "api/Netick.IPEndPointExt.html": {
    "href": "api/Netick.IPEndPointExt.html",
    "title": "Class IPEndPointExt | Netick Networking Engine",
    "keywords": "Class IPEndPointExt Namespace Netick Assembly Netick.dll public static class IPEndPointExt Inheritance object IPEndPointExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNetickEndPoint(IPEndPoint) public static NetickEndPoint ToNetickEndPoint(this IPEndPoint iPEndPoint) Parameters iPEndPoint IPEndPoint Returns NetickEndPoint"
  },
  "api/Netick.IPhysicsComponent.html": {
    "href": "api/Netick.IPhysicsComponent.html",
    "title": "Interface IPhysicsComponent | Netick Networking Engine",
    "keywords": "Interface IPhysicsComponent Namespace Netick Assembly Netick.Unity.dll public interface IPhysicsComponent"
  },
  "api/Netick.IgnoreCodeGen.html": {
    "href": "api/Netick.IgnoreCodeGen.html",
    "title": "Class IgnoreCodeGen | Netick Networking Engine",
    "keywords": "Class IgnoreCodeGen Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true)] public class IgnoreCodeGen : Attribute Inheritance object Attribute IgnoreCodeGen Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IgnoreCodeGen() public IgnoreCodeGen()"
  },
  "api/Netick.Interpolation.html": {
    "href": "api/Netick.Interpolation.html",
    "title": "Class Interpolation | Netick Networking Engine",
    "keywords": "Class Interpolation Namespace Netick Assembly Netick.dll A class representing an abstract interpolation interface, which is implemented by RemoteInterpolation and LocalInterpolation public abstract class Interpolation Inheritance object Interpolation Derived LocalInterpolation RemoteInterpolation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields FromSnapshot public Allocator FromSnapshot Field Value Allocator ToSnapshot public Allocator ToSnapshot Field Value Allocator Properties Alpha public abstract float Alpha { get; } Property Value float From public abstract Tick From { get; } Property Value Tick HasSnapshots public abstract bool HasSnapshots { get; } Property Value bool Time public abstract float Time { get; } Property Value float To public abstract Tick To { get; } Property Value Tick"
  },
  "api/Netick.InterpolationMode.html": {
    "href": "api/Netick.InterpolationMode.html",
    "title": "Enum InterpolationMode | Netick Networking Engine",
    "keywords": "Enum InterpolationMode Namespace Netick Assembly Netick.dll public enum InterpolationMode Fields Auto = 0 PredicatedSnapshot = 1 RemoteSnapshot = 2"
  },
  "api/Netick.Interpolator-1.html": {
    "href": "api/Netick.Interpolator-1.html",
    "title": "Struct Interpolator<T> | Netick Networking Engine",
    "keywords": "Struct Interpolator<T> Namespace Netick Assembly Netick.dll A struct that is used to obtain interpolation data for a network property. public struct Interpolator<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Interpolator(Entity, int*, int) public Interpolator(Entity entity, int* s, int offsetInWords) Parameters entity Entity s int* offsetInWords int Methods GetInterpolationData(InterpolationMode, out T, out T, out float) Tries to obtain interpolation data for this frame. public bool GetInterpolationData(InterpolationMode interpolationMode, out T from, out T to, out float alpha) Parameters interpolationMode InterpolationMode from T to T alpha float Returns bool"
  },
  "api/Netick.LocalInterpolation.html": {
    "href": "api/Netick.LocalInterpolation.html",
    "title": "Class LocalInterpolation | Netick Networking Engine",
    "keywords": "Class LocalInterpolation Namespace Netick Assembly Netick.dll A class representing the local interpolation of this instance NetickEngine. This should be used whenever you want to use Predicted Timeline on the client. public sealed class LocalInterpolation : Interpolation Inheritance object Interpolation LocalInterpolation Inherited Members Interpolation.FromSnapshot Interpolation.ToSnapshot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LocalInterpolation(NetickEngine) public LocalInterpolation(NetickEngine sandbox) Parameters sandbox NetickEngine Properties Alpha public override float Alpha { get; } Property Value float From public override Tick From { get; } Property Value Tick HasSnapshots public override bool HasSnapshots { get; } Property Value bool Time Time in seconds. public override float Time { get; } Property Value float To public override Tick To { get; } Property Value Tick Methods Update() public void Update()"
  },
  "api/Netick.NativeUDPSocket.html": {
    "href": "api/Netick.NativeUDPSocket.html",
    "title": "Class NativeUDPSocket | Netick Networking Engine",
    "keywords": "Class NativeUDPSocket Namespace Netick Assembly Netick.dll public class NativeUDPSocket : INetickSocket Inheritance object NativeUDPSocket Implements INetickSocket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NativeUDPSocket() public NativeUDPSocket() Methods Connect(ref IEndPoint) public bool Connect(ref IEndPoint address) Parameters address IEndPoint Returns bool CreateFromIpPort(string, int) public IEndPoint CreateFromIpPort(string ip, int port) Parameters ip string port int Returns IEndPoint Deinitialize() public void Deinitialize() Initialize() public bool Initialize() Returns bool Poll() public int Poll() Returns int Receive(out IEndPoint, byte*, int) public int Receive(out IEndPoint address, byte* buffer, int bufferSize) Parameters address IEndPoint buffer byte* bufferSize int Returns int Send(IEndPoint, byte*, int) public void Send(IEndPoint address, byte* data, int dataLength) Parameters address IEndPoint data byte* dataLength int Shutdown() public void Shutdown() StartClient(long, long) public void StartClient(long sendBufferSize, long receiveBufferSize) Parameters sendBufferSize long receiveBufferSize long StartServer(int, long, long) public void StartServer(int port, long sendBufferSize, long receiveBufferSize) Parameters port int sendBufferSize long receiveBufferSize long"
  },
  "api/Netick.NetcodeProfiler.html": {
    "href": "api/Netick.NetcodeProfiler.html",
    "title": "Class NetcodeProfiler | Netick Networking Engine",
    "keywords": "Class NetcodeProfiler Namespace Netick Assembly Netick.dll public class NetcodeProfiler Inheritance object NetcodeProfiler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetcodeProfiler(string) public NetcodeProfiler(string name) Parameters name string Fields Name public readonly string Name Field Value string _stats public readonly FloatStats _stats Field Value FloatStats Methods Begin() public void Begin() End() public void End() GetStats() public string GetStats() Returns string Update(float) public void Update(float v) Parameters v float"
  },
  "api/Netick.NetickBehaviour.html": {
    "href": "api/Netick.NetickBehaviour.html",
    "title": "Class NetickBehaviour | Netick Networking Engine",
    "keywords": "Class NetickBehaviour Namespace Netick Assembly Netick.Unity.dll public abstract class NetickBehaviour : MonoBehaviour, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour Implements INetickScript Derived NetickCoreComponent NetworkBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickBehaviour() protected NetickBehaviour() Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine Entity public Entity Entity { get; } Property Value Entity Object The NetworkObject this behaviour is attached to. public NetworkObject Object { get; } Property Value NetworkObject Sandbox The NetworkSandbox containing this Object. public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox Methods NetworkAwake() public virtual void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public virtual void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public virtual void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public virtual void NetworkRender() NetworkStart() Called when this behaviour has been added to the simulation. public virtual void NetworkStart() NetworkUpdate() Called every frame. Executed before NetworkFixedUpdate. public virtual void NetworkUpdate()"
  },
  "api/Netick.NetickConfig.html": {
    "href": "api/Netick.NetickConfig.html",
    "title": "Class NetickConfig | Netick Networking Engine",
    "keywords": "Class NetickConfig Namespace Netick Assembly Netick.Unity.dll Config class for Netick. public class NetickConfig : ScriptableObject Inheritance object Object ScriptableObject NetickConfig Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NetickConfig() public NetickConfig() Fields AllocatorBlockSize [SerializeField] public int AllocatorBlockSize Field Value int AoI [HideInInspector] public bool AoI Field Value bool Assemblies [SerializeField] public List<string> Assemblies Field Value List<string> CellSize [HideInInspector] public int CellSize Field Value int ClientDivisor [Range(1, 5)] [SerializeField] public int ClientDivisor Field Value int EnableLagCompensation [Tooltip(\"Enable this if you want to use the Lag Compensation module.\")] [HideInInspector] public bool EnableLagCompensation Field Value bool EnableLogging [Tooltip(\"Disable this before doing a production build because you don't want Netick to log to the console.\")] public bool EnableLogging Field Value bool InvokeRenderInHeadless [Tooltip(\"Disable this if you want Netick to not invoke Network Render (and thus not calculate interpolation) callbacks in headless builds.\")] public bool InvokeRenderInHeadless Field Value bool LAN_DISCOVERY public const ulong LAN_DISCOVERY = 17392885680301928799 Field Value ulong LAN_DISCOVERY_RESPONSE public const ulong LAN_DISCOVERY_RESPONSE = 1251984615806071114 Field Value ulong LagCompensationDebug [HideInInspector] public bool LagCompensationDebug Field Value bool MaxPredicatedTicks [Tooltip(\"Max number of ticks the client is allowed to predict.\")] [Range(1, 128)] public int MaxPredicatedTicks Field Value int MaxSendableDataSize [Tooltip(\"Max data size [bytes] that can be sent to a peer in a single tick. Default: 13000\")] [SerializeField] public int MaxSendableDataSize Field Value int PhysicsType [Tooltip(\"Type of the physics scene. If you choose None, Netick will not step the simulation. If you want to use Box2D physics (Rigidbody 2D) select Physics 2D. Or if you want to use NVIDIA PhysX (Rigidbody), select 3D Physics.\")] public PhysicsType PhysicsType Field Value PhysicsType PredictedClientPhysics [Tooltip(\"Enable this if you want to be able to have client-side prediction over Rigidbody objects. \\n\\nIt's recommended to keep this disabled if you don't have any predictable rigidbody objects in your game, because it comes at a performance hit due to calling the physics system Simulate method several times per tick.\")] [SerializeField] public bool PredictedClientPhysics Field Value bool ReceiveBufferSize [SerializeField] public int ReceiveBufferSize Field Value int RenderInvokeOrder [Tooltip(\"Choose the place where Network Render will be invoked. Update means it will be invoked after all Netick NetworkUpdate callbacks, but before any of Unity LateUpdate callbacks. LateUpdate means it will be invoked after all Unity Update callbacks and all Netick NetworkUpdate callbacks. \")] public NetworkRenderInvokeOrder RenderInvokeOrder Field Value NetworkRenderInvokeOrder Replication [Tooltip(\"Replication mode used in replicating game state to clients.\")] public ReplicationMode Replication Field Value ReplicationMode SendBufferSize [SerializeField] public int SendBufferSize Field Value int ServerDivisor [Range(1, 5)] [SerializeField] public int ServerDivisor Field Value int SimClientLoss [Tooltip(\"Simulated client outward packet loss.\")] [HideInInspector] public float SimClientLoss Field Value float SimServerLoss [Tooltip(\"Simulated server outward packet loss.\")] [HideInInspector] public float SimServerLoss Field Value float TickRate [HideInInspector] [Range(1, 240)] [Tooltip(\"Network simulation rate [ticks per second]. Overrides <b>Time.fixedDeltaTime</b> when starting Netick. Must not be changed at runtime. Default: 33\")] public float TickRate Field Value float Timeout [SerializeField] public int Timeout Field Value int UseSceneSwitchThread [HideInInspector] public bool UseSceneSwitchThread Field Value bool WorldSize [HideInInspector] public int WorldSize Field Value int Properties GetMaxPlayers public int GetMaxPlayers { get; } Property Value int TickPeriod [Tooltip(\"Time period between network simulation steps. Same as UnityEngine.Time.fixedDeltaTime\")] public float TickPeriod { get; } Property Value float Methods GetTransport() public NetworkTransport GetTransport() Returns NetworkTransport"
  },
  "api/Netick.NetickConfigData.html": {
    "href": "api/Netick.NetickConfigData.html",
    "title": "Struct NetickConfigData | Netick Networking Engine",
    "keywords": "Struct NetickConfigData Namespace Netick Assembly Netick.dll public struct NetickConfigData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AllocatorBlockSize public int AllocatorBlockSize Field Value int AoICellSize public float AoICellSize Field Value float AoIWorldSize public float AoIWorldSize Field Value float EnableAoI public bool EnableAoI Field Value bool EnableLagCompensation public bool EnableLagCompensation Field Value bool EnableLagCompensationDebug public bool EnableLagCompensationDebug Field Value bool EnableLogging public bool EnableLogging Field Value bool MaxDataPerConnectionPerTickInBytes public int MaxDataPerConnectionPerTickInBytes Field Value int MaxInterpolationBufferCount public int MaxInterpolationBufferCount Field Value int MaxObjects public int MaxObjects Field Value int MaxPlayers public int MaxPlayers Field Value int MaxPredicatedTicks public int MaxPredicatedTicks Field Value int ReplicationMode public ReplicationMode ReplicationMode Field Value ReplicationMode SavedSnapshotsCount public int SavedSnapshotsCount Field Value int ServerDivisor public int ServerDivisor Field Value int SimulationCulling public bool SimulationCulling Field Value bool TickRate public float TickRate Field Value float TransportReceiveBufferSize public int TransportReceiveBufferSize Field Value int TransportSendBufferSize public int TransportSendBufferSize Field Value int TransportTimeout public int TransportTimeout Field Value int"
  },
  "api/Netick.NetickCoreComponent.html": {
    "href": "api/Netick.NetickCoreComponent.html",
    "title": "Class NetickCoreComponent | Netick Networking Engine",
    "keywords": "Class NetickCoreComponent Namespace Netick Assembly Netick.Unity.dll public class NetickCoreComponent : NetickBehaviour, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetickCoreComponent Implements INetickScript Derived PhysicsSimulationStep Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickCoreComponent() public NetickCoreComponent()"
  },
  "api/Netick.NetickEndPoint.html": {
    "href": "api/Netick.NetickEndPoint.html",
    "title": "Class NetickEndPoint | Netick Networking Engine",
    "keywords": "Class NetickEndPoint Namespace Netick Assembly Netick.dll public class NetickEndPoint : IPEndPoint, IEndPoint Inheritance object EndPoint IPEndPoint NetickEndPoint Implements IEndPoint Inherited Members IPEndPoint.MaxPort IPEndPoint.MinPort IPEndPoint.Create(SocketAddress) IPEndPoint.Equals(object) IPEndPoint.GetHashCode() IPEndPoint.Serialize() IPEndPoint.ToString() IPEndPoint.Address IPEndPoint.AddressFamily IPEndPoint.Port object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPEndPointExt.ToNetickEndPoint(IPEndPoint) Constructors NetickEndPoint(IPAddress, int) public NetickEndPoint(IPAddress ip, int port) Parameters ip IPAddress port int"
  },
  "api/Netick.NetickEngine.html": {
    "href": "api/Netick.NetickEngine.html",
    "title": "Class NetickEngine | Netick Networking Engine",
    "keywords": "Class NetickEngine Namespace Netick Assembly Netick.dll public sealed class NetickEngine Inheritance object NetickEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickEngine() public NetickEngine() Fields SimulatedLossIn public float SimulatedLossIn Field Value float SimulatedLossOut public float SimulatedLossOut Field Value float Properties Client public Client Client { get; } Property Value Client ClientSimulation public ClientSimulation ClientSimulation { get; } Property Value ClientSimulation Config public NetickConfigData Config { get; } Property Value NetickConfigData ConnectedClients A list containing all connected clients currently. Note: if you want the clients + the server, use ConnectedPlayers. public NetickList<ServerConnection> ConnectedClients { get; } Property Value NetickList<ServerConnection> ConnectedPlayers A list containing all connected clients currently, in addition to the server. Note: if you only want the clients, use ConnectedClients. public NetickList<NetworkPlayer> ConnectedPlayers { get; } Property Value NetickList<NetworkPlayer> CurrentRpcCaller public NetworkPlayer CurrentRpcCaller { get; } Property Value NetworkPlayer CurrentRpcSource public NetworkConnection CurrentRpcSource { get; } Property Value NetworkConnection Entities public Dictionary<int, Entity> Entities { get; } Property Value Dictionary<int, Entity> FixedDeltaTime public float FixedDeltaTime { get; } Property Value float Grid public Grid Grid { get; } Property Value Grid InKBps Incoming data in kilobytes per second (KBps). public float InKBps { get; } Property Value float InputEnabled public bool InputEnabled { get; set; } Property Value bool InterpolationDelay [Client Only] Interpolation delay in seconds. public float InterpolationDelay { get; } Property Value float IsClient public bool IsClient { get; } Property Value bool IsConnected [Client Only] Returns true if this client is currently connected to a server. public bool IsConnected { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input/tick of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsRunning public bool IsRunning { get; } Property Value bool IsServer public bool IsServer { get; } Property Value bool LagCompensation public INetickComponent LagCompensation { get; } Property Value INetickComponent LocalInterpolation public LocalInterpolation LocalInterpolation { get; } Property Value LocalInterpolation LocalPeer public NetworkPeer LocalPeer { get; } Property Value NetworkPeer Name public string Name { get; } Property Value string OutKBps Outgoing data in kilobytes per second (KBps). public float OutKBps { get; } Property Value float Port public int Port { get; } Property Value int PostNetworkFixedUpdate public Action PostNetworkFixedUpdate { get; set; } Property Value Action PostResimulation public Action PostResimulation { get; set; } Property Value Action PostRollback public Action PostRollback { get; set; } Property Value Action PreClientResimulation public Action PreClientResimulation { get; set; } Property Value Action PreNetworkFixedUpdate public Action PreNetworkFixedUpdate { get; set; } Property Value Action PreResimulation public Action PreResimulation { get; set; } Property Value Action PreRollback public Action PreRollback { get; set; } Property Value Action RTT [Client Only] The round-trip time (RTT) of the client in seconds. public double RTT { get; } Property Value double RemoteInterpolation public RemoteInterpolation RemoteInterpolation { get; } Property Value RemoteInterpolation Server public Server Server { get; } Property Value Server ServerSimulation public ServerSimulation ServerSimulation { get; } Property Value ServerSimulation ServerSimulationTick public Tick ServerSimulationTick { get; } Property Value Tick Simulate public bool Simulate { get; set; } Property Value bool SimulationTick public Tick SimulationTick { get; } Property Value Tick SnapshotTick public Tick SnapshotTick { get; } Property Value Tick Tick public Tick Tick { get; } Property Value Tick Timer public SimulationClock Timer { get; } Property Value SimulationClock Methods ClientAddEntity(Tick, INetickEntity, int, NetworkPlayer, bool, bool, SpawnPredictionKey) public void ClientAddEntity(Tick spawnTick, INetickEntity entity, int id, NetworkPlayer player, bool remoteSpawn, bool addToSimulation, SpawnPredictionKey spawnKey = default) Parameters spawnTick Tick entity INetickEntity id int player NetworkPlayer remoteSpawn bool addToSimulation bool spawnKey SpawnPredictionKey Connect(int, string, byte[], int) public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int ip string connectionData byte[] connectionDataLength int CreateEntityLocal(INetickEntity) public Entity CreateEntityLocal(INetickEntity userEntity) Parameters userEntity INetickEntity Returns Entity DestroyEntity(INetickEntity, bool, bool) public void DestroyEntity(INetickEntity entity, bool instant, bool freeMemory) Parameters entity INetickEntity instant bool freeMemory bool DisconnectFromServer() [Client Only] Disconnects this client from the server. public void DisconnectFromServer() DrainPendingObjects() public void DrainPendingObjects() FetchInput<T>(out T, Entity) public bool FetchInput<T>(out T input, Entity entity) where T : unmanaged Parameters input T entity Entity Returns bool Type Parameters T ~NetickEngine() protected ~NetickEngine() FreeEntity(INetickEntity) public void FreeEntity(INetickEntity entity) Parameters entity INetickEntity GetBehaviourOrder(Type) public int GetBehaviourOrder(Type type) Parameters type Type Returns int GetEntityUserMeta(Entity) public byte* GetEntityUserMeta(Entity entity) Parameters entity Entity Returns byte* GetInput<T>() public T GetInput<T>() where T : unmanaged Returns T Type Parameters T GetStatePtr(Entity, Allocator) public int* GetStatePtr(Entity entity, Allocator snapshot) Parameters entity Entity snapshot Allocator Returns int* Kick(ServerConnection) public void Kick(ServerConnection connection) Parameters connection ServerConnection Render() Call this to invoke NetworkRender on simulated entities. This might not be needed if you are running a headless build. public void Render() ResetForSceneSwitch() public void ResetForSceneSwitch() ServerAddEntity(NetworkPlayer, INetickEntity, SpawnPredictionKey) public void ServerAddEntity(NetworkPlayer inputSource, INetickEntity obj, SpawnPredictionKey spawnKey) Parameters inputSource NetworkPlayer obj INetickEntity spawnKey SpawnPredictionKey SetEntityUserMetaDirty(Entity) public void SetEntityUserMetaDirty(Entity entity) Parameters entity Entity SetInput<T>(T) public void SetInput<T>(T input) where T : unmanaged Parameters input T Type Parameters T Shutdown() public void Shutdown() Start(string, int, bool, IGameEngine, NetickConfigData, NetworkTransport, ReflectionData, INetickLogger, IMemoryAllocator) public void Start(string name, int serverPort, bool isServer, IGameEngine gameEngine, NetickConfigData config, NetworkTransport transport, ReflectionData reflectionData, INetickLogger logger, IMemoryAllocator allocator) Parameters name string serverPort int isServer bool gameEngine IGameEngine config NetickConfigData transport NetworkTransport reflectionData ReflectionData logger INetickLogger allocator IMemoryAllocator Update(float, float) Update Netick's logic and public void Update(float deltaTime, float timeScale) Parameters deltaTime float timeScale float"
  },
  "api/Netick.NetickEntityMeta.html": {
    "href": "api/Netick.NetickEntityMeta.html",
    "title": "Struct NetickEntityMeta | Netick Networking Engine",
    "keywords": "Struct NetickEntityMeta Namespace Netick Assembly Netick.dll public struct NetickEntityMeta Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields GridPosition public NetickVector2Int GridPosition Field Value NetickVector2Int Id public int Id Field Value int InputSourceId public int InputSourceId Field Value int InstanceCounter public int InstanceCounter Field Value int IsDestroyed public int IsDestroyed Field Value int"
  },
  "api/Netick.NetickList-1.html": {
    "href": "api/Netick.NetickList-1.html",
    "title": "Class NetickList<T> | Netick Networking Engine",
    "keywords": "Class NetickList<T> Namespace Netick Assembly Netick.dll public sealed class NetickList<T> : IEnumerable<T>, IEnumerable Type Parameters T Inheritance object NetickList<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickList(int) public NetickList(int count = 4) Parameters count int Properties Count public int Count { get; } Property Value int this[int] public T this[int i] { get; } Parameters i int Property Value T Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.NetickLogger.html": {
    "href": "api/Netick.NetickLogger.html",
    "title": "Class NetickLogger | Netick Networking Engine",
    "keywords": "Class NetickLogger Namespace Netick Assembly Netick.dll public static class NetickLogger Inheritance object NetickLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Assert(bool) public static void Assert(bool condition) Parameters condition bool Assert(bool, object) public static void Assert(bool condition, object message) Parameters condition bool message object Log(NetickEngine, object) public static void Log(NetickEngine sandbox, object message) Parameters sandbox NetickEngine message object Log(object) public static void Log(object message) Parameters message object LogError(Entity, object) public static void LogError(Entity obj, object message) Parameters obj Entity message object LogError(NetickEngine, object) public static void LogError(NetickEngine sandbox, object message) Parameters sandbox NetickEngine message object LogError(object) public static void LogError(object message) Parameters message object LogWarning(object) public static void LogWarning(object message) Parameters message object"
  },
  "api/Netick.NetickProfiler.html": {
    "href": "api/Netick.NetickProfiler.html",
    "title": "Class NetickProfiler | Netick Networking Engine",
    "keywords": "Class NetickProfiler Namespace Netick Assembly Netick.dll public sealed class NetickProfiler Inheritance object NetickProfiler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickProfiler() public NetickProfiler() Properties BytesPerPacketIn public FloatStats BytesPerPacketIn { get; } Property Value FloatStats BytesPerPacketOut public FloatStats BytesPerPacketOut { get; } Property Value FloatStats FPS public FloatStats FPS { get; } Property Value FloatStats RTT public FloatStats RTT { get; } Property Value FloatStats Resimulations public FloatStats Resimulations { get; } Property Value FloatStats"
  },
  "api/Netick.NetickTransport.html": {
    "href": "api/Netick.NetickTransport.html",
    "title": "Class NetickTransport | Netick Networking Engine",
    "keywords": "Class NetickTransport Namespace Netick Assembly Netick.dll public class NetickTransport : NetworkTransport Inheritance object NetworkTransport NetickTransport Inherited Members NetworkTransport.ForceUpdate() NetworkTransport.NetworkPeer NetworkTransport.Engine object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickTransport() public NetickTransport() Methods Connect(string, int, byte[], int) public override void Connect(string address, int port, byte[] connectionData, int connectionDataLength) Parameters address string port int connectionData byte[] connectionDataLength int Disconnect(TransportConnection) public override void Disconnect(TransportConnection connection) Parameters connection TransportConnection Init() public override void Init() OnConnectFailed(IEndPoint, ConnectionFailedReason) public void OnConnectFailed(IEndPoint address, ConnectionFailedReason reason) Parameters address IEndPoint reason ConnectionFailedReason OnReceive(Connection, BitBuffer) public void OnReceive(Connection peer, BitBuffer reader) Parameters peer Connection reader BitBuffer PollEvents() public override void PollEvents() Run(RunMode, int) public override void Run(RunMode mode, int port) Parameters mode RunMode port int Shutdown() public override void Shutdown()"
  },
  "api/Netick.NetickTransportConnection.html": {
    "href": "api/Netick.NetickTransportConnection.html",
    "title": "Class NetickTransportConnection | Netick Networking Engine",
    "keywords": "Class NetickTransportConnection Namespace Netick Assembly Netick.dll public class NetickTransportConnection : TransportConnection Inheritance object TransportConnection NetickTransportConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickTransportConnection() public NetickTransportConnection() Fields Peer public Connection Peer Field Value Connection Properties EndPoint public override IEndPoint EndPoint { get; } Property Value IEndPoint Mtu public override int Mtu { get; } Property Value int Methods Send(IntPtr, int) public override void Send(IntPtr ptr, int length) Parameters ptr IntPtr length int"
  },
  "api/Netick.NetickUniqueObjectMeta.html": {
    "href": "api/Netick.NetickUniqueObjectMeta.html",
    "title": "Class NetickUniqueObjectMeta | Netick Networking Engine",
    "keywords": "Class NetickUniqueObjectMeta Namespace Netick Assembly Netick.dll public sealed class NetickUniqueObjectMeta Inheritance object NetickUniqueObjectMeta Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickUniqueObjectMeta() public NetickUniqueObjectMeta() Fields BehaviourToOffset public List<int> BehaviourToOffset Field Value List<int> Hash public int Hash Field Value int PropertyElementsToPropertyStartIndex public Dictionary<int, ChangedMethod> PropertyElementsToPropertyStartIndex Field Value Dictionary<int, ChangedMethod> PropertyNameToDataOffset public Dictionary<string, int> PropertyNameToDataOffset Field Value Dictionary<string, int>"
  },
  "api/Netick.NetickUnityUtils.html": {
    "href": "api/Netick.NetickUnityUtils.html",
    "title": "Class NetickUnityUtils | Netick Networking Engine",
    "keywords": "Class NetickUnityUtils Namespace Netick Assembly Netick.Unity.dll public class NetickUnityUtils Inheritance object NetickUnityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickUnityUtils() public NetickUnityUtils() Methods GetColor(int*, float) public static Color GetColor(int* data, float precision) Parameters data int* precision float Returns Color GetFloat(int*, float) public static float GetFloat(int* data, float precision) Parameters data int* precision float Returns float GetQuaternion(int*, float) public static Quaternion GetQuaternion(int* data, float precision) Parameters data int* precision float Returns Quaternion GetVector2(int*, float) public static Vector2 GetVector2(int* data, float precision) Parameters data int* precision float Returns Vector2 GetVector3(int*, float) public static Vector3 GetVector3(int* data, float precision) Parameters data int* precision float Returns Vector3 SetColor(int*, Color, float) public static void SetColor(int* data, Color value, float precisionInverse) Parameters data int* value Color precisionInverse float SetFloat(int*, float, float) public static void SetFloat(int* data, float value, float precisionInverse) Parameters data int* value float precisionInverse float SetQuaternion(int*, Quaternion, float) public static void SetQuaternion(int* data, Quaternion value, float precisionInverse) Parameters data int* value Quaternion precisionInverse float SetVector2(int*, Vector2, float) public static void SetVector2(int* data, Vector2 value, float precisionInverse) Parameters data int* value Vector2 precisionInverse float SetVector3(int*, Vector3, float) public static void SetVector3(int* data, Vector3 value, float precisionInverse) Parameters data int* value Vector3 precisionInverse float Vector3NetickToUnity(NetickVector3) public static Vector3 Vector3NetickToUnity(NetickVector3 from) Parameters from NetickVector3 Returns Vector3 Vector3UnityToNetick(Vector3) public static NetickVector3 Vector3UnityToNetick(Vector3 from) Parameters from Vector3 Returns NetickVector3"
  },
  "api/Netick.NetickVector2Int.html": {
    "href": "api/Netick.NetickVector2Int.html",
    "title": "Struct NetickVector2Int | Netick Networking Engine",
    "keywords": "Struct NetickVector2Int Namespace Netick Assembly Netick.dll public struct NetickVector2Int Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickVector2Int(int, int) public NetickVector2Int(int x, int z) Parameters x int z int Fields X public int X Field Value int Z public int Z Field Value int"
  },
  "api/Netick.NetickVector3.html": {
    "href": "api/Netick.NetickVector3.html",
    "title": "Struct NetickVector3 | Netick Networking Engine",
    "keywords": "Struct NetickVector3 Namespace Netick Assembly Netick.dll public struct NetickVector3 Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickVector3(float, float, float) public NetickVector3(float x, float y, float z) Parameters x float y float z float Fields X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Properties this[int] public float this[int index] { get; set; } Parameters index int Property Value float SqrMagnitude public float SqrMagnitude { get; } Property Value float Methods Equals(NetickVector3) public bool Equals(NetickVector3 other) Parameters other NetickVector3 Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool GetHashCode() public override int GetHashCode() Returns int Max(NetickVector3, NetickVector3) public static NetickVector3 Max(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns NetickVector3 Min(NetickVector3, NetickVector3) public static NetickVector3 Min(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns NetickVector3 Operators operator +(NetickVector3, NetickVector3) public static NetickVector3 operator +(NetickVector3 a, NetickVector3 b) Parameters a NetickVector3 b NetickVector3 Returns NetickVector3 operator /(NetickVector3, float) public static NetickVector3 operator /(NetickVector3 a, float d) Parameters a NetickVector3 d float Returns NetickVector3 operator ==(NetickVector3, NetickVector3) public static bool operator ==(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns bool operator !=(NetickVector3, NetickVector3) public static bool operator !=(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns bool operator *(NetickVector3, float) public static NetickVector3 operator *(NetickVector3 a, float d) Parameters a NetickVector3 d float Returns NetickVector3 operator *(float, NetickVector3) public static NetickVector3 operator *(float d, NetickVector3 a) Parameters d float a NetickVector3 Returns NetickVector3 operator -(NetickVector3, NetickVector3) public static NetickVector3 operator -(NetickVector3 a, NetickVector3 b) Parameters a NetickVector3 b NetickVector3 Returns NetickVector3 operator -(NetickVector3) public static NetickVector3 operator -(NetickVector3 a) Parameters a NetickVector3 Returns NetickVector3"
  },
  "api/Netick.NetickVector3Int.html": {
    "href": "api/Netick.NetickVector3Int.html",
    "title": "Struct NetickVector3Int | Netick Networking Engine",
    "keywords": "Struct NetickVector3Int Namespace Netick Assembly Netick.dll public struct NetickVector3Int Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickVector3Int(int, int, int) public NetickVector3Int(int x, int y, int z) Parameters x int y int z int Fields X public int X Field Value int Y public int Y Field Value int Z public int Z Field Value int"
  },
  "api/Netick.Network.Sandboxs.html": {
    "href": "api/Netick.Network.Sandboxs.html",
    "title": "Struct Network.Sandboxs | Netick Networking Engine",
    "keywords": "Struct Network.Sandboxs Namespace Netick Assembly Netick.Unity.dll public struct Network.Sandboxs Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Clients public NetworkSandbox[] Clients Field Value NetworkSandbox[] Server public NetworkSandbox Server Field Value NetworkSandbox"
  },
  "api/Netick.Network.html": {
    "href": "api/Netick.Network.html",
    "title": "Class Network | Netick Networking Engine",
    "keywords": "Class Network Namespace Netick Assembly Netick.Unity.dll [HideInInspector] [DisallowMultipleComponent] public sealed class Network : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Network Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Properties Config public static NetickConfig Config { get; } Property Value NetickConfig Instance public static Network Instance { get; } Property Value Network IsHeadless public static bool IsHeadless { get; } Property Value bool IsRunning public static bool IsRunning { get; } Property Value bool StartMode public StartMode StartMode { get; } Property Value StartMode Version public static string Version { get; } Property Value string Methods Focus(NetworkSandbox) Focus on a specific sandbox. public static void Focus(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox The sandbox to focus on. Init(NetworkTransport, NetickConfig, int) Initializes Netick. This is automatically called when you start Netick. If you don't provide a NetickConfig, Netick will use the default config, which can be modified/found in (Netick -> Settings). If you don't provide a NetworkTransport, Netick will use the transport assigned in (Netick -> Settings -> Transport). public static void Init(NetworkTransport transport = null, NetickConfig config = null, int sceneBuildIndex = -1) Parameters transport NetworkTransport config NetickConfig sceneBuildIndex int Shutdown(bool) Shuts down Netick and destroys all sandboxes. The shutdown will occur in the next frame. For immediate shutdown, use: ShutdownImmediately(bool) public static void Shutdown(bool destroyAllNetworkObjects = false) Parameters destroyAllNetworkObjects bool ShutdownImmediately(bool) Shuts down Netick and destroys all sandboxes immediately. public static void ShutdownImmediately(bool destroyAllNetworkObjects = false) Parameters destroyAllNetworkObjects bool ShutdownSandbox(NetworkSandbox, bool) Shuts down a specific sandbox. public static void ShutdownSandbox(NetworkSandbox sandbox, bool destroyAllNetworkObjects = false) Parameters sandbox NetworkSandbox The sandbox to shut down. destroyAllNetworkObjects bool StartAsClient(NetworkTransportProvider, int, GameObject) Starts Netick as a client. public static NetworkSandbox StartAsClient(NetworkTransportProvider transportProvider, int port, GameObject prefab = null) Parameters transportProvider NetworkTransportProvider port int prefab GameObject Returns NetworkSandbox The sandbox representing the client StartAsServer(NetworkTransportProvider, int, GameObject) Starts Netick as a server. public static NetworkSandbox StartAsServer(NetworkTransportProvider transportProvider, int port, GameObject prefab = null) Parameters transportProvider NetworkTransportProvider port int Network port. prefab GameObject Returns NetworkSandbox The sandbox representing the server StartAsServerAndClient(NetworkTransportProvider, int, GameObject, int) Starts both a client (or clients) and a server. public static Network.Sandboxs StartAsServerAndClient(NetworkTransportProvider transportProvider, int serverPort, GameObject prefab = null, int numOfClients = 1) Parameters transportProvider NetworkTransportProvider serverPort int Network port. prefab GameObject numOfClients int Number of client sandboxs to create. Returns Network.Sandboxs"
  },
  "api/Netick.NetworkAnimator.html": {
    "href": "api/Netick.NetworkAnimator.html",
    "title": "Class NetworkAnimator | Netick Networking Engine",
    "keywords": "Class NetworkAnimator Namespace Netick Assembly Netick.Unity.dll [IgnoreCodeGen] public class NetworkAnimator : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour NetworkAnimator Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkAnimator() public NetworkAnimator()"
  },
  "api/Netick.NetworkArray-1.html": {
    "href": "api/Netick.NetworkArray-1.html",
    "title": "Class NetworkArray<T> | Netick Networking Engine",
    "keywords": "Class NetworkArray<T> Namespace Netick Assembly Netick.Unity.dll [HideInInspector] public class NetworkArray<T> : NetworkArray, INetworkArray, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkArray NetworkArray<T> Implements INetworkArray IEnumerable<T> IEnumerable Inherited Members NetworkArray.Length object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkArray(int) public NetworkArray(int capacity) Parameters capacity int Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Methods Add(T) public void Add(T element) Parameters element T GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords) Parameters beh INetickNetworkScript state int* elementSizeWords int InternalReset() public override void InternalReset()"
  },
  "api/Netick.NetworkArray.html": {
    "href": "api/Netick.NetworkArray.html",
    "title": "Class NetworkArray | Netick Networking Engine",
    "keywords": "Class NetworkArray Namespace Netick Assembly Netick.Unity.dll public class NetworkArray : INetworkArray Inheritance object NetworkArray Implements INetworkArray Derived NetworkArray<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkArray() public NetworkArray() Properties Length public int Length { get; } Property Value int Methods InternalInit(INetickNetworkScript, int*, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords) Parameters beh INetickNetworkScript state int* elementSizeWords int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkBehaviour.html": {
    "href": "api/Netick.NetworkBehaviour.html",
    "title": "Class NetworkBehaviour | Netick Networking Engine",
    "keywords": "Class NetworkBehaviour Namespace Netick Assembly Netick.Unity.dll public abstract class NetworkBehaviour : NetickBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour Implements INetickNetworkScript INetickScript Derived GeneratedBehaviourExample NetworkAnimator NetworkTransform Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkBehaviour() protected NetworkBehaviour() Fields S public int* S Field Value int* Properties BehaviourId The network id of this NetworkBehaviour. public int BehaviourId { get; } Property Value int Id The network id of this object. public int Id { get; } Property Value int IsClient Returns true if this NetickEngine is a client. public bool IsClient { get; } Property Value bool IsInputSource Returns true if this LocalPlayer is providing inputs to this Object. public bool IsInputSource { get; } Property Value bool IsOwner Returns true if this NetickEngine is the owner of this Object. In this version of Netick: Server=Owner. public bool IsOwner { get; } Property Value bool IsPredicted public bool IsPredicted { get; } Property Value bool IsProxy Returns true if we neither provide inputs nor own this object. public bool IsProxy { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsServer Returns true if this NetickEngine is the server. public bool IsServer { get; } Property Value bool Methods FetchInput<T>(out T) Fetchs a network input for this tick. Returns false if no input source is currently providing inputs to this Object, or when input loss occurs (in case of a remote input source). public bool FetchInput<T>(out T input) where T : unmanaged Parameters input T Returns bool Type Parameters T FindInterpolator<T>(string) public Interpolator<T> FindInterpolator<T>(string propertyName) where T : unmanaged Parameters propertyName string Returns Interpolator<T> Type Parameters T GameEngineIntoNetcode() public virtual void GameEngineIntoNetcode() InternalGetStateSizeWords() public virtual int InternalGetStateSizeWords() Returns int InternalInit() public virtual void InternalInit() InternalReset() public virtual void InternalReset() NetcodeIntoGameEngine() public virtual void NetcodeIntoGameEngine() NetworkReset() public virtual void NetworkReset() OnInputSourceChanged(NetworkPlayer) public virtual void OnInputSourceChanged(NetworkPlayer previous) Parameters previous NetworkPlayer OnInputSourceLeft() Called on the server when the input source of this Object has disconnected. public virtual void OnInputSourceLeft() OnSpawnPredictionSucceeded() Called on the client when the server confirms that this object has been successfully spawn-predicted and therefore has a valid Id. public virtual void OnSpawnPredictionSucceeded()"
  },
  "api/Netick.NetworkChannel.html": {
    "href": "api/Netick.NetworkChannel.html",
    "title": "Class NetworkChannel | Netick Networking Engine",
    "keywords": "Class NetworkChannel Namespace Netick Assembly Netick.dll public abstract class NetworkChannel Inheritance object NetworkChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkChannel(NetickEngine, NetworkConnection) public NetworkChannel(NetickEngine sandbox, NetworkConnection connection) Parameters sandbox NetickEngine connection NetworkConnection Methods Clear() public abstract void Clear() PostRead() public abstract void PostRead() PostSend() public abstract void PostSend() Read(BitBuffer, Tick, Tick) public abstract void Read(BitBuffer buffer, Tick senderTick, Tick lastTick) Parameters buffer BitBuffer senderTick Tick lastTick Tick Reset() public abstract void Reset() Write(BitBuffer) public abstract void Write(BitBuffer buffer) Parameters buffer BitBuffer"
  },
  "api/Netick.NetworkConnection.html": {
    "href": "api/Netick.NetworkConnection.html",
    "title": "Class NetworkConnection | Netick Networking Engine",
    "keywords": "Class NetworkConnection Namespace Netick Assembly Netick.dll public abstract class NetworkConnection : NetworkPlayer Inheritance object NetworkPlayer NetworkConnection Derived ClientConnection ServerConnection Inherited Members NetworkPlayer.Engine NetworkPlayer.Position NetworkPlayer.CellPosition NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LocalUserData public int* LocalUserData Field Value int* MaxOutgoingDataPerTickInBytes public int MaxOutgoingDataPerTickInBytes Field Value int RemoteUserData public int* RemoteUserData Field Value int* Properties BytesIn public Accumulator BytesIn { get; } Property Value Accumulator BytesOut public Accumulator BytesOut { get; } Property Value Accumulator EndPoint public IEndPoint EndPoint { get; } Property Value IEndPoint SendEntities public bool SendEntities { get; set; } Property Value bool Methods ~NetworkConnection() protected ~NetworkConnection()"
  },
  "api/Netick.NetworkConnectionRequest.html": {
    "href": "api/Netick.NetworkConnectionRequest.html",
    "title": "Class NetworkConnectionRequest | Netick Networking Engine",
    "keywords": "Class NetworkConnectionRequest Namespace Netick Assembly Netick.dll public sealed class NetworkConnectionRequest Inheritance object NetworkConnectionRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AllowConnection public bool AllowConnection Field Value bool Properties Data public byte[] Data { get; } Property Value byte[] DataLength public int DataLength { get; set; } Property Value int Source public IPEndPoint Source { get; } Property Value IPEndPoint Methods Accept() public void Accept() Refuse() public void Refuse()"
  },
  "api/Netick.NetworkEvents.OnClientConnectedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnClientConnectedEvent.html",
    "title": "Class NetworkEvents.OnClientConnectedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnClientConnectedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnClientConnectedEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnClientConnectedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientConnectedEvent() public OnClientConnectedEvent()"
  },
  "api/Netick.NetworkEvents.OnClientDisconnectedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnClientDisconnectedEvent.html",
    "title": "Class NetworkEvents.OnClientDisconnectedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnClientDisconnectedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnClientDisconnectedEvent : UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason> NetworkEvents.OnClientDisconnectedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.AddListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientDisconnectedEvent() public OnClientDisconnectedEvent()"
  },
  "api/Netick.NetworkEvents.OnClientSceneLoadeddEvent.html": {
    "href": "api/Netick.NetworkEvents.OnClientSceneLoadeddEvent.html",
    "title": "Class NetworkEvents.OnClientSceneLoadeddEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnClientSceneLoadeddEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnClientSceneLoadeddEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnClientSceneLoadeddEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientSceneLoadeddEvent() public OnClientSceneLoadeddEvent()"
  },
  "api/Netick.NetworkEvents.OnConnectFailedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnConnectFailedEvent.html",
    "title": "Class NetworkEvents.OnConnectFailedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnConnectFailedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnConnectFailedEvent : UnityEvent<NetworkSandbox, ConnectionFailedReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, ConnectionFailedReason> NetworkEvents.OnConnectFailedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, ConnectionFailedReason>.AddListener(UnityAction<NetworkSandbox, ConnectionFailedReason>) UnityEvent<NetworkSandbox, ConnectionFailedReason>.RemoveListener(UnityAction<NetworkSandbox, ConnectionFailedReason>) UnityEvent<NetworkSandbox, ConnectionFailedReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, ConnectionFailedReason>.Invoke(NetworkSandbox, ConnectionFailedReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectFailedEvent() public OnConnectFailedEvent()"
  },
  "api/Netick.NetworkEvents.OnConnectRequestEvent.html": {
    "href": "api/Netick.NetworkEvents.OnConnectRequestEvent.html",
    "title": "Class NetworkEvents.OnConnectRequestEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnConnectRequestEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnConnectRequestEvent : UnityEvent<NetworkSandbox, NetworkConnectionRequest>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnectionRequest> NetworkEvents.OnConnectRequestEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnectionRequest>.AddListener(UnityAction<NetworkSandbox, NetworkConnectionRequest>) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnectionRequest>) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.Invoke(NetworkSandbox, NetworkConnectionRequest) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectRequestEvent() public OnConnectRequestEvent()"
  },
  "api/Netick.NetworkEvents.OnConnectedToServerEvent.html": {
    "href": "api/Netick.NetworkEvents.OnConnectedToServerEvent.html",
    "title": "Class NetworkEvents.OnConnectedToServerEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnConnectedToServerEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnConnectedToServerEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnConnectedToServerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectedToServerEvent() public OnConnectedToServerEvent()"
  },
  "api/Netick.NetworkEvents.OnDisconnectedFromServerEvent.html": {
    "href": "api/Netick.NetworkEvents.OnDisconnectedFromServerEvent.html",
    "title": "Class NetworkEvents.OnDisconnectedFromServerEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnDisconnectedFromServerEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnDisconnectedFromServerEvent : UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason> NetworkEvents.OnDisconnectedFromServerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.AddListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnDisconnectedFromServerEvent() public OnDisconnectedFromServerEvent()"
  },
  "api/Netick.NetworkEvents.OnInputEvent.html": {
    "href": "api/Netick.NetworkEvents.OnInputEvent.html",
    "title": "Class NetworkEvents.OnInputEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnInputEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnInputEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnInputEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnInputEvent() public OnInputEvent()"
  },
  "api/Netick.NetworkEvents.OnMatchCreatedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnMatchCreatedEvent.html",
    "title": "Class NetworkEvents.OnMatchCreatedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnMatchCreatedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnMatchCreatedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnMatchCreatedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnMatchCreatedEvent() public OnMatchCreatedEvent()"
  },
  "api/Netick.NetworkEvents.OnMatchListUpdateEvent.html": {
    "href": "api/Netick.NetworkEvents.OnMatchListUpdateEvent.html",
    "title": "Class NetworkEvents.OnMatchListUpdateEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnMatchListUpdateEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnMatchListUpdateEvent : UnityEvent<NetworkSandbox, List<Session>>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, List<Session>> NetworkEvents.OnMatchListUpdateEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, List<Session>>.AddListener(UnityAction<NetworkSandbox, List<Session>>) UnityEvent<NetworkSandbox, List<Session>>.RemoveListener(UnityAction<NetworkSandbox, List<Session>>) UnityEvent<NetworkSandbox, List<Session>>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, List<Session>>.Invoke(NetworkSandbox, List<Session>) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnMatchListUpdateEvent() public OnMatchListUpdateEvent()"
  },
  "api/Netick.NetworkEvents.OnObjectCreatedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnObjectCreatedEvent.html",
    "title": "Class NetworkEvents.OnObjectCreatedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnObjectCreatedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnObjectCreatedEvent : UnityEvent<NetworkObject>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkObject> NetworkEvents.OnObjectCreatedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkObject>.AddListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.RemoveListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.FindMethod_Impl(string, Type) UnityEvent<NetworkObject>.Invoke(NetworkObject) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnObjectCreatedEvent() public OnObjectCreatedEvent()"
  },
  "api/Netick.NetworkEvents.OnObjectDestroyedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnObjectDestroyedEvent.html",
    "title": "Class NetworkEvents.OnObjectDestroyedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnObjectDestroyedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnObjectDestroyedEvent : UnityEvent<NetworkObject>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkObject> NetworkEvents.OnObjectDestroyedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkObject>.AddListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.RemoveListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.FindMethod_Impl(string, Type) UnityEvent<NetworkObject>.Invoke(NetworkObject) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnObjectDestroyedEvent() public OnObjectDestroyedEvent()"
  },
  "api/Netick.NetworkEvents.OnSceneLoadStartedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnSceneLoadStartedEvent.html",
    "title": "Class NetworkEvents.OnSceneLoadStartedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnSceneLoadStartedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnSceneLoadStartedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnSceneLoadStartedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnSceneLoadStartedEvent() public OnSceneLoadStartedEvent()"
  },
  "api/Netick.NetworkEvents.OnSceneLoadedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnSceneLoadedEvent.html",
    "title": "Class NetworkEvents.OnSceneLoadedEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnSceneLoadedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnSceneLoadedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnSceneLoadedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnSceneLoadedEvent() public OnSceneLoadedEvent()"
  },
  "api/Netick.NetworkEvents.OnShutdownEvent.html": {
    "href": "api/Netick.NetworkEvents.OnShutdownEvent.html",
    "title": "Class NetworkEvents.OnShutdownEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnShutdownEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnShutdownEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnShutdownEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnShutdownEvent() public OnShutdownEvent()"
  },
  "api/Netick.NetworkEvents.OnStartupEvent.html": {
    "href": "api/Netick.NetworkEvents.OnStartupEvent.html",
    "title": "Class NetworkEvents.OnStartupEvent | Netick Networking Engine",
    "keywords": "Class NetworkEvents.OnStartupEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnStartupEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnStartupEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnStartupEvent() public OnStartupEvent()"
  },
  "api/Netick.NetworkEvents.html": {
    "href": "api/Netick.NetworkEvents.html",
    "title": "Class NetworkEvents | Netick Networking Engine",
    "keywords": "Class NetworkEvents Namespace Netick Assembly Netick.Unity.dll [AddComponentMenu(\"Netick/Network Events\")] public class NetworkEvents : NetworkEventsListner Inheritance object Object Component Behaviour MonoBehaviour NetworkEventsListner NetworkEvents Inherited Members NetworkEventsListner.UnlinkFromNetick() NetworkEventsListner.Sandbox MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkEvents() public NetworkEvents() Fields onClientConnected public NetworkEvents.OnClientConnectedEvent onClientConnected Field Value NetworkEvents.OnClientConnectedEvent onClientDisconnected public NetworkEvents.OnClientDisconnectedEvent onClientDisconnected Field Value NetworkEvents.OnClientDisconnectedEvent onClientSceneLoaded public NetworkEvents.OnClientSceneLoadeddEvent onClientSceneLoaded Field Value NetworkEvents.OnClientSceneLoadeddEvent onConnectFailedEvent public NetworkEvents.OnConnectFailedEvent onConnectFailedEvent Field Value NetworkEvents.OnConnectFailedEvent onConnectRequest public NetworkEvents.OnConnectRequestEvent onConnectRequest Field Value NetworkEvents.OnConnectRequestEvent onConnectedToServer public NetworkEvents.OnConnectedToServerEvent onConnectedToServer Field Value NetworkEvents.OnConnectedToServerEvent onDisconnectedFromServer public NetworkEvents.OnDisconnectedFromServerEvent onDisconnectedFromServer Field Value NetworkEvents.OnDisconnectedFromServerEvent onInput public NetworkEvents.OnInputEvent onInput Field Value NetworkEvents.OnInputEvent onMatchCreated public NetworkEvents.OnMatchCreatedEvent onMatchCreated Field Value NetworkEvents.OnMatchCreatedEvent onMatchList public NetworkEvents.OnMatchListUpdateEvent onMatchList Field Value NetworkEvents.OnMatchListUpdateEvent onObjectCreated public NetworkEvents.OnObjectCreatedEvent onObjectCreated Field Value NetworkEvents.OnObjectCreatedEvent onObjectDestroyed public NetworkEvents.OnObjectDestroyedEvent onObjectDestroyed Field Value NetworkEvents.OnObjectDestroyedEvent onSceneLoadStarted public NetworkEvents.OnSceneLoadStartedEvent onSceneLoadStarted Field Value NetworkEvents.OnSceneLoadStartedEvent onSceneLoaded public NetworkEvents.OnSceneLoadedEvent onSceneLoaded Field Value NetworkEvents.OnSceneLoadedEvent onShutdown public NetworkEvents.OnShutdownEvent onShutdown Field Value NetworkEvents.OnShutdownEvent onStartup public NetworkEvents.OnStartupEvent onStartup Field Value NetworkEvents.OnStartupEvent Methods OnClientConnected(NetworkSandbox, NetworkConnection) Called on the server when a specific client has connected. public override void OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the server when a specific client has disconnected. public override void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason OnClientSceneLoaded(NetworkSandbox, NetworkConnection) Called on the server when a specific client finished loading the scene. public override void OnClientSceneLoaded(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnConnectFailed(NetworkSandbox, ConnectionFailedReason) Called on the client when the connection to the server was refused, or simply failed. public override void OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. public override void OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest OnConnectedToServer(NetworkSandbox, NetworkConnection) Called on the client when connection to the server has been initiated. public override void OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the client when connection to the server ended, or when a network error caused the disconnection. public override void OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason OnInput(NetworkSandbox) Called to read inputs. public override void OnInput(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchCreated(NetworkSandbox) public override void OnMatchCreated(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchListUpdate(NetworkSandbox, List<Session>) public override void OnMatchListUpdate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> OnObjectCreated(NetworkObject) Called when a network object has been created/initialized. public override void OnObjectCreated(NetworkObject obj) Parameters obj NetworkObject OnObjectDestroyed(NetworkObject) Called when a network object has been destroyed/recycled. public override void OnObjectDestroyed(NetworkObject obj) Parameters obj NetworkObject OnSceneLoadStarted(NetworkSandbox) Called on both the client and the server before beginning to load the new scene. public override void OnSceneLoadStarted(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneLoaded(NetworkSandbox) Called on both the client and the server when the scene has been loaded. public override void OnSceneLoaded(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnShutdown(NetworkSandbox) Called when Netick has been shut down. public override void OnShutdown(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnStartup(NetworkSandbox) Called when Netick has been started. public override void OnStartup(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.NetworkEventsListner.html": {
    "href": "api/Netick.NetworkEventsListner.html",
    "title": "Class NetworkEventsListner | Netick Networking Engine",
    "keywords": "Class NetworkEventsListner Namespace Netick Assembly Netick.Unity.dll public abstract class NetworkEventsListner : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour NetworkEventsListner Derived NetworkEvents Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkEventsListner() protected NetworkEventsListner() Properties Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox Methods OnClientConnected(NetworkSandbox, NetworkConnection) Called on the server when a specific client has connected. public virtual void OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the server when a specific client has disconnected. public virtual void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason OnClientSceneLoaded(NetworkSandbox, NetworkConnection) Called on the server when a specific client finished loading the scene. public virtual void OnClientSceneLoaded(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnConnectFailed(NetworkSandbox, ConnectionFailedReason) Called on the client when the connection to the server was refused, or simply failed. public virtual void OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. public virtual void OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest OnConnectedToServer(NetworkSandbox, NetworkConnection) Called on the client when connection to the server has been initiated. public virtual void OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the client when connection to the server ended, or when a network error caused the disconnection. public virtual void OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason OnInput(NetworkSandbox) Called to read inputs. public virtual void OnInput(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchCreated(NetworkSandbox) public virtual void OnMatchCreated(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchListUpdate(NetworkSandbox, List<Session>) public virtual void OnMatchListUpdate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> OnObjectCreated(NetworkObject) Called when a network object has been created/initialized. public virtual void OnObjectCreated(NetworkObject entity) Parameters entity NetworkObject OnObjectDestroyed(NetworkObject) Called when a network object has been destroyed/recycled. public virtual void OnObjectDestroyed(NetworkObject entity) Parameters entity NetworkObject OnSceneLoadStarted(NetworkSandbox) Called on both the client and the server before beginning to load the new scene. public virtual void OnSceneLoadStarted(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneLoaded(NetworkSandbox) Called on both the client and the server when the scene has been loaded. public virtual void OnSceneLoaded(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnShutdown(NetworkSandbox) Called when Netick has been shut down. public virtual void OnShutdown(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnStartup(NetworkSandbox) Called when Netick has been started. public virtual void OnStartup(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox UnlinkFromNetick() public void UnlinkFromNetick()"
  },
  "api/Netick.NetworkObject.html": {
    "href": "api/Netick.NetworkObject.html",
    "title": "Class NetworkObject | Netick Networking Engine",
    "keywords": "Class NetworkObject Namespace Netick Assembly Netick.Unity.dll public class NetworkObject : MonoBehaviour, INetickEntity Inheritance object Object Component Behaviour MonoBehaviour NetworkObject Implements INetickEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkObject() public NetworkObject() Fields UseAoI public bool UseAoI Field Value bool Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine Entity public Entity Entity { get; } Property Value Entity HasValidId Returns true if this NetworkObject has been added to the simulation by Netick, and thus has a valid id. [SerializeField] public bool HasValidId { get; } Property Value bool Id public int Id { get; } Property Value int InputSource Returns the source NetworkPlayer (NetworkPeer/ServerConnection) of inputs for this NetworkObject. If the source of inputs is remote (from a client) it returns that ServerConnection, while on the input source itself it returns the local NetworkPlayer. public NetworkPlayer InputSource { get; set; } Property Value NetworkPlayer IsClient Returns true if this Engine is a client. public bool IsClient { get; } Property Value bool IsInputSource Returns true if this LocalPlayer is providing inputs for this NetworkObject. public bool IsInputSource { get; } Property Value bool IsOwner Returns true if this Engine is the owner of this Object. In this version of Netick: Server=Owner. public bool IsOwner { get; } Property Value bool IsPrefab public bool IsPrefab { get; } Property Value bool IsPrefabObject public bool IsPrefabObject { get; } Property Value bool IsProxy Returns true if we neither provide inputs nor own this object. public bool IsProxy { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsSceneObject [SerializeField] public bool IsSceneObject { get; } Property Value bool IsServer Returns true if this Engine is the server. public bool IsServer { get; } Property Value bool IsSpawnPredicted public bool IsSpawnPredicted { get; } Property Value bool Parent The NetworkObject parent of this object. public NetworkObject Parent { get; } Property Value NetworkObject PredictionMode public Relevancy PredictionMode { get; } Property Value Relevancy Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox SpawnPredictionKey public SpawnPredictionKey SpawnPredictionKey { get; } Property Value SpawnPredictionKey SpawnTick The tick which this object was spawned at. public Tick SpawnTick { get; } Property Value Tick Methods GetBehaviourById<T>(int) public T GetBehaviourById<T>(int id) where T : NetworkBehaviour Parameters id int Returns T Type Parameters T GetBehaviour<T>() public T GetBehaviour<T>() where T : NetworkBehaviour Returns T Type Parameters T GetSceneId() public int GetSceneId() Returns int Initialize(NetickEngine, Entity) Used to initialize the user entity and assign Engine and Entity public void Initialize(NetickEngine sandbox, Entity entity) Parameters sandbox NetickEngine entity Entity SetParent(NetworkObject) [Owner/InputSource Only] Changes the parent of this object. public void SetParent(NetworkObject obj) Parameters obj NetworkObject The object which will become the parent of this object."
  },
  "api/Netick.NetworkPeer.html": {
    "href": "api/Netick.NetworkPeer.html",
    "title": "Class NetworkPeer | Netick Networking Engine",
    "keywords": "Class NetworkPeer Namespace Netick Assembly Netick.dll public abstract class NetworkPeer : NetworkPlayer Inheritance object NetworkPlayer NetworkPeer Derived Client Server Inherited Members NetworkPlayer.Engine NetworkPlayer.Position NetworkPlayer.CellPosition NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InKBps public abstract float InKBps { get; } Property Value float OutKBps public abstract float OutKBps { get; } Property Value float Methods OnConnectFailed(ConnectionFailedReason) public abstract void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnectRequest(byte[], int, IPEndPoint) public virtual bool OnConnectRequest(byte[] data, int length, IPEndPoint source) Parameters data byte[] length int source IPEndPoint Returns bool OnConnected(TransportConnection) public abstract void OnConnected(TransportConnection peer) Parameters peer TransportConnection OnDisconnected(TransportConnection, TransportDisconnectReason) public abstract void OnDisconnected(TransportConnection peer, TransportDisconnectReason transportDisconnectReason) Parameters peer TransportConnection transportDisconnectReason TransportDisconnectReason Receive(TransportConnection, BitBuffer) public abstract void Receive(TransportConnection connection, BitBuffer reader) Parameters connection TransportConnection reader BitBuffer"
  },
  "api/Netick.NetworkPlayer.html": {
    "href": "api/Netick.NetworkPlayer.html",
    "title": "Class NetworkPlayer | Netick Networking Engine",
    "keywords": "Class NetworkPlayer Namespace Netick Assembly Netick.dll Represents a network player, which can be either a local player (representing this sandbox) or a remote connection (representing a connected client)). public abstract class NetworkPlayer Inheritance object NetworkPlayer Derived NetworkConnection NetworkPeer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Engine public readonly NetickEngine Engine Field Value NetickEngine Properties CellPosition public NetickVector3Int CellPosition { get; } Property Value NetickVector3Int PlayerObject Use this to associate an object with this player. public object PlayerObject { get; set; } Property Value object Position public NetickVector3 Position { get; set; } Property Value NetickVector3"
  },
  "api/Netick.NetworkPlayerExtension.html": {
    "href": "api/Netick.NetworkPlayerExtension.html",
    "title": "Class NetworkPlayerExtension | Netick Networking Engine",
    "keywords": "Class NetworkPlayerExtension Namespace Netick Assembly Netick.Unity.dll public static class NetworkPlayerExtension Inheritance object NetworkPlayerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBehaviour<T>(ChangedInfo) public static T GetBehaviour<T>(this ChangedInfo change) where T : NetworkBehaviour Parameters change ChangedInfo Returns T Type Parameters T SetAoIPosition(NetworkPlayer, Vector3) public static void SetAoIPosition(this NetworkPlayer conn, Vector3 position) Parameters conn NetworkPlayer position Vector3"
  },
  "api/Netick.NetworkRenderInvokeOrder.html": {
    "href": "api/Netick.NetworkRenderInvokeOrder.html",
    "title": "Enum NetworkRenderInvokeOrder | Netick Networking Engine",
    "keywords": "Enum NetworkRenderInvokeOrder Namespace Netick Assembly Netick.Unity.dll public enum NetworkRenderInvokeOrder Fields LateUpdate = 1 Update = 0"
  },
  "api/Netick.NetworkRigidbody.html": {
    "href": "api/Netick.NetworkRigidbody.html",
    "title": "Class NetworkRigidbody | Netick Networking Engine",
    "keywords": "Class NetworkRigidbody Namespace Netick Assembly Netick.Unity.dll This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody must be used if you want to have client-side prediction over PhysX objects since it replicates several other properties necessary for correct prediction. [IgnoreCodeGen] [AddComponentMenu(\"Netick/Network Rigidbody\")] [RequireComponent(typeof(Rigidbody))] [DisallowMultipleComponent] public sealed class NetworkRigidbody : NetworkTransform, INetickNetworkScript, INetickScript, IPhysicsComponent Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour NetworkTransform NetworkRigidbody Implements INetickNetworkScript INetickScript IPhysicsComponent Inherited Members NetworkTransform.RenderTransform NetworkTransform.NetworkRender() NetworkTransform.Interpolate() NetworkTransform.InterpolationSource NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkUpdate() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkRigidbody() public NetworkRigidbody() Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.NetworkRpc.html": {
    "href": "api/Netick.NetworkRpc.html",
    "title": "Class NetworkRpc | Netick Networking Engine",
    "keywords": "Class NetworkRpc Namespace Netick Assembly Netick.dll public class NetworkRpc Inheritance object NetworkRpc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkRpc() public NetworkRpc() Fields Data public int* Data Field Value int* Id public int Id Field Value int SizeWords public int SizeWords Field Value int Target public RpcPeers Target Field Value RpcPeers Methods Init(int, INetickNetworkScript, bool, RpcPeers, int) public NetworkRpc Init(int id, INetickNetworkScript behaviour, bool isReliable, RpcPeers target, int sizeWords) Parameters id int behaviour INetickNetworkScript isReliable bool target RpcPeers sizeWords int Returns NetworkRpc InternalCanInvoke(NetickEngine, Entity, RpcPeers, RpcPeers, bool, int) Internal method. Never call this. public static bool InternalCanInvoke(NetickEngine sandbox, Entity obj, RpcPeers source, RpcPeers target, bool localInvoke, int rpcId) Parameters sandbox NetickEngine obj Entity source RpcPeers target RpcPeers localInvoke bool rpcId int Returns bool InternalCanSend(NetickEngine, Entity, RpcPeers, RpcPeers, int) Internal method. Never call this. public static bool InternalCanSend(NetickEngine sandbox, Entity obj, RpcPeers source, RpcPeers target, int id) Parameters sandbox NetickEngine obj Entity source RpcPeers target RpcPeers id int Returns bool InternalCreateRpc(NetickEngine, NetworkConnection, int, INetickNetworkScript, bool, RpcPeers, int) Internal method. Never call this. public static NetworkRpc InternalCreateRpc(NetickEngine sandbox, NetworkConnection connection, int id, INetickNetworkScript behaviour, bool isReliable, RpcPeers target, int wordSize) Parameters sandbox NetickEngine connection NetworkConnection id int behaviour INetickNetworkScript isReliable bool target RpcPeers wordSize int Returns NetworkRpc InternalIsResim(NetickEngine) Internal method. Never call this. public static bool InternalIsResim(NetickEngine sandbox) Parameters sandbox NetickEngine Returns bool Recycle() public void Recycle() RegisterSent(NetworkConnection) public void RegisterSent(NetworkConnection connection) Parameters connection NetworkConnection"
  },
  "api/Netick.NetworkSandbox.html": {
    "href": "api/Netick.NetworkSandbox.html",
    "title": "Class NetworkSandbox | Netick Networking Engine",
    "keywords": "Class NetworkSandbox Namespace Netick Assembly Netick.Unity.dll public class NetworkSandbox : MonoBehaviour, IGameEngine Inheritance object Object Component Behaviour MonoBehaviour NetworkSandbox Implements IGameEngine Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkSandbox() public NetworkSandbox() Fields ClientTransform public Transform ClientTransform Field Value Transform Radius public float Radius Field Value float Properties Config Configuration data for Netick. public NetickConfig Config { get; } Property Value NetickConfig ConnectedClients A list containing all connected clients currently. Note: if you want the clients + the server, use ConnectedPlayers. public NetickList<ServerConnection> ConnectedClients { get; } Property Value NetickList<ServerConnection> ConnectedPlayers A list containing all connected clients currently, in addition to the server. Note: if you only want the clients, use ConnectedClients. public NetickList<NetworkPlayer> ConnectedPlayers { get; } Property Value NetickList<NetworkPlayer> ConnectedServer The server the client is connected to. public NetworkConnection ConnectedServer { get; } Property Value NetworkConnection CurrentRpcCaller public NetworkPlayer CurrentRpcCaller { get; } Property Value NetworkPlayer CurrentRpcSource Always always returns null except when called inside the body of an RPC method, it returns the NetworkConnection we are executing RPCs from. public NetworkConnection CurrentRpcSource { get; } Property Value NetworkConnection DeltaTime public float DeltaTime { get; } Property Value float Engine public NetickEngine Engine { get; } Property Value NetickEngine FixedDeltaTime Time period between network simulation steps. Same as UnityEngine.Time.fixedDeltaTime public float FixedDeltaTime { get; } Property Value float HasLoadScene public bool HasLoadScene { get; set; } Property Value bool InKBps Incoming data in kilobytes per second (KBps). public float InKBps { get; } Property Value float InputEnabled public bool InputEnabled { get; set; } Property Value bool InterpolationDelay [Client Only] Interpolation delay in seconds. public float InterpolationDelay { get; } Property Value float IsClient Returns true if this NetworkSandbox is a client. public bool IsClient { get; } Property Value bool IsConnected [Client Only] Returns true if this client is currently connected to a server. public bool IsConnected { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input/tick of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsServer Returns true if this NetworkSandbox is the server. public bool IsServer { get; } Property Value bool IsVisiable public bool IsVisiable { get; set; } Property Value bool LocalInterpolation public LocalInterpolation LocalInterpolation { get; } Property Value LocalInterpolation LocalPlayer This player. public NetworkPlayer LocalPlayer { get; } Property Value NetworkPlayer Name public string Name { get; } Property Value string NetworkTime public float NetworkTime { get; } Property Value float Objects A list containing all simulated/registered network objects [NetworkObject] currently. Note: to get a network object by id, use: TryGetObject(int, out NetworkObject) public ObjectList Objects { get; } Property Value ObjectList OutKBps Outgoing data in kilobytes per second (KBps). public float OutKBps { get; } Property Value float Physics The UnityEngine.PhysicsScene associated with this NetworkSandbox. Always use this to perform physics queries inside the sandbox instead of UnityEngine.Physics. public PhysicsScene Physics { get; } Property Value PhysicsScene Physics2D The UnityEngine.PhysicsScene2D associated with this NetworkSandbox. Always use this to perform physics queries inside the sandbox instead of UnityEngine.Physics2D. public PhysicsScene2D Physics2D { get; } Property Value PhysicsScene2D RTT [Client Only] The round-trip time (RTT) of the client in seconds. public double RTT { get; } Property Value double RemoteInterpolation public RemoteInterpolation RemoteInterpolation { get; } Property Value RemoteInterpolation ResimulationStep public int ResimulationStep { get; } Property Value int Resimulations public int Resimulations { get; } Property Value int ScaledFixedDeltaTime public float ScaledFixedDeltaTime { get; } Property Value float Scene The UnityEngine.SceneManagement.Scene associated with this NetworkSandbox. public Scene Scene { get; } Property Value Scene SceneBuildIndex public int SceneBuildIndex { get; } Property Value int StartMode public StartMode StartMode { get; } Property Value StartMode Tick Current simulation tick. On the server, it's always going forward/increasing. On the client, during resimulations it returns the current resimulated tick. To check for resimulations, use IsResimulating. public Tick Tick { get; } Property Value Tick Timer public SimulationClock Timer { get; } Property Value SimulationClock UserObject Use this to associate an object with this sandbox. public object UserObject { get; set; } Property Value object Methods Connect(int, string, byte[], int) public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int ip string connectionData byte[] connectionDataLength int CreateMatch(string) [Server Only] Creates a match. Only functional if the low-level transport has support for matchmaking. public void CreateMatch(string name) Parameters name string Name of the match. Destroy(NetworkObject) Destroys a network object. Only call this on the server or on the client for spawn-predicted objects which have -1 Ids. Note: never call this on a child NetworkObject of the original prefab, only the root of the prefab. public void Destroy(NetworkObject obj) Parameters obj NetworkObject The object to destroy. DestroyPool(GameObject) public void DestroyPool(GameObject networkedPrefab) Parameters networkedPrefab GameObject DisableComponent(Component) public void DisableComponent(Component component) Parameters component Component DisconnectFromServer() [Client Only] Disconnects this client from the server. public void DisconnectFromServer() EnableComponent(Component) public void EnableComponent(Component component) Parameters component Component FindGameObjectWithTag(string, bool) public GameObject FindGameObjectWithTag(string tag, bool activeOnly = true) Parameters tag string activeOnly bool Returns GameObject FindGameObjectsWithTag(string, bool) public List<GameObject> FindGameObjectsWithTag(string tag, bool activeOnly = true) Parameters tag string activeOnly bool Returns List<GameObject> FindGameObjectsWithTag(string, List<GameObject>, bool) public List<GameObject> FindGameObjectsWithTag(string tag, List<GameObject> results, bool activeOnly = true) Parameters tag string results List<GameObject> activeOnly bool Returns List<GameObject> FindObjectOfType<T>(bool) public T FindObjectOfType<T>(bool activeOnly = true) where T : Component Parameters activeOnly bool Returns T Type Parameters T FindObjectsOfType<T>(bool) public List<T> FindObjectsOfType<T>(bool activeOnly = true) where T : Component Parameters activeOnly bool Returns List<T> Type Parameters T FindObjectsOfType<T>(List<T>, bool) public void FindObjectsOfType<T>(List<T> results, bool activeOnly = true) where T : Component Parameters results List<T> activeOnly bool Type Parameters T GetInput<T>() public T GetInput<T>() where T : unmanaged Returns T Type Parameters T GetObject(int) Gets the NetworkObject with the specified id. Returns null in case no object with that id exists. public NetworkObject GetObject(int id) Parameters id int The id of the NetworkObject Returns NetworkObject GetPrefab(string) Gets a Network Prefab by name. Note: this causes GC. public GameObject GetPrefab(string name) Parameters name string Returns GameObject The Network Prefab Hide() protected void Hide() InitializePool(GameObject, int, bool) Initializes the pool for the specified prefab. After this method has been called for a certain prefab, all instances of that prefab will be recycled and reset when created/destroyed. Note: this method should only be called on OnStartup(NetworkSandbox), in other words, just after Netick has been started. public void InitializePool(GameObject networkedPrefab, int preloadedAmount, bool hideInactiveMembers = false) Parameters networkedPrefab GameObject Prefab to enable pooling for. preloadedAmount int How many instances to be preloaded. hideInactiveMembers bool Pass true to hide inactive pool members. Kick(ServerConnection) [Server Only] Disconnects a client from the server. public void Kick(ServerConnection client) Parameters client ServerConnection The client to be disconnected. Log(object) public void Log(object message) Parameters message object LogError(object) public void LogError(object message) Parameters message object LogWarning(object) public void LogWarning(object message) Parameters message object NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayer, SpawnPredictionKey) Instantiates a network prefab. Commonly, this should only be called on the server, since only the server can instantiate network prefabs. However, the client can also call this to spawn-predict a prefab by providing a spawn key which must be the same on the server and client when this method is called. Read the docs to learn more about how to use spawn-prediction. Note: make sure the prefab has been registered. Note: the specified input source will be given to every NetworkObject child of this prefab. public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, Quaternion rotation, NetworkPlayer inputSource = null, SpawnPredictionKey predictedSpawnKey = default) Parameters prefab GameObject The prefab to be instantiated. position Vector3 Position of the instantiated object. rotation Quaternion Rotation of the instantiated object. inputSource NetworkPlayer Input source of the instantiated object. predictedSpawnKey SpawnPredictionKey Returns NetworkObject NetworkUpdate() public void NetworkUpdate() OnSceneSwitchStart(int) public void OnSceneSwitchStart(int sceneBuildIndex) Parameters sceneBuildIndex int RefreshMatchList() Requests an update to the match list. Only functional if the low-level transport has support for matchmaking. public void RefreshMatchList() SetComponentEnabled(Component, bool) public void SetComponentEnabled(Component component, bool enabled) Parameters component Component enabled bool SetInput<T>(T) public void SetInput<T>(T input) where T : unmanaged Parameters input T Type Parameters T Show() protected void Show() SwitchScene(int) [Server Only] Switches to a different scene. This must be called instead of LoadSceneAsync(int) or its variations. public void SwitchScene(int sceneBuildIndex) Parameters sceneBuildIndex int Index of the desired scene. TickToTime(Tick) Converts tick to time in seconds. public float TickToTime(Tick tick) Parameters tick Tick Returns float TickToTime(float) Converts tick to time in seconds. public float TickToTime(float tick) Parameters tick float Returns float TryGetBehaviour<T>(int, out T) Trys to get the NetworkBehaviour of a NetworkObject with the specified id. public bool TryGetBehaviour<T>(int id, out T behaviour) where T : NetworkBehaviour Parameters id int The id of the network object behaviour T Returns bool Type Parameters T TryGetObject(int, out NetworkObject) Trys to get the NetworkObject with the specified id. public bool TryGetObject(int id, out NetworkObject obj) Parameters id int The id of the NetworkObject obj NetworkObject Returns bool"
  },
  "api/Netick.NetworkString16.html": {
    "href": "api/Netick.NetworkString16.html",
    "title": "Struct NetworkString16 | Netick Networking Engine",
    "keywords": "Struct NetworkString16 Namespace Netick Assembly Netick.dll public struct NetworkString16 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString16(string) public NetworkString16(string value) Parameters value string Methods ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkString32.html": {
    "href": "api/Netick.NetworkString32.html",
    "title": "Struct NetworkString32 | Netick Networking Engine",
    "keywords": "Struct NetworkString32 Namespace Netick Assembly Netick.dll public struct NetworkString32 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString32(string) public NetworkString32(string value) Parameters value string Methods ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkString8.html": {
    "href": "api/Netick.NetworkString8.html",
    "title": "Struct NetworkString8 | Netick Networking Engine",
    "keywords": "Struct NetworkString8 Namespace Netick Assembly Netick.dll public struct NetworkString8 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString8(string) public NetworkString8(string value) Parameters value string Methods ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkTransform.html": {
    "href": "api/Netick.NetworkTransform.html",
    "title": "Class NetworkTransform | Netick Networking Engine",
    "keywords": "Class NetworkTransform Namespace Netick Assembly Netick.Unity.dll [IgnoreCodeGen] [ExecutionOrder(-1000)] [AddComponentMenu(\"Netick/Network Transform\")] [RequireComponent(typeof(Transform))] [DisallowMultipleComponent] public class NetworkTransform : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour NetworkTransform Implements INetickNetworkScript INetickScript Derived NetworkRigidbody Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkTransform() public NetworkTransform() Fields RenderTransform public Transform RenderTransform Field Value Transform TransformSpace [SerializeField] protected TransformSpace TransformSpace Field Value TransformSpace _posInversePrecision protected float _posInversePrecision Field Value float _posPrecision protected float _posPrecision Field Value float _syncPosition protected bool _syncPosition Field Value bool _syncRot protected bool _syncRot Field Value bool Properties InterpolationSource public InterpolationMode InterpolationSource { get; set; } Property Value InterpolationMode Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int Interpolate() public void Interpolate() NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public override void NetworkRender()"
  },
  "api/Netick.NetworkTransformRepConditions.html": {
    "href": "api/Netick.NetworkTransformRepConditions.html",
    "title": "Enum NetworkTransformRepConditions | Netick Networking Engine",
    "keywords": "Enum NetworkTransformRepConditions Namespace Netick Assembly Netick.Unity.dll [Flags] public enum NetworkTransformRepConditions Fields CompressPosition = 8 CompressRotation = 16 SyncPosition = 1 SyncRotation = 2"
  },
  "api/Netick.NetworkTransport.html": {
    "href": "api/Netick.NetworkTransport.html",
    "title": "Class NetworkTransport | Netick Networking Engine",
    "keywords": "Class NetworkTransport Namespace Netick Assembly Netick.dll public abstract class NetworkTransport Inheritance object NetworkTransport Derived NetickTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkTransport() protected NetworkTransport() Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine NetworkPeer public NetworkPeer NetworkPeer { get; } Property Value NetworkPeer Methods Connect(string, int, byte[], int) public abstract void Connect(string address, int port, byte[] connectionData, int connectionDataLength) Parameters address string port int connectionData byte[] connectionDataLength int Disconnect(TransportConnection) public abstract void Disconnect(TransportConnection connection) Parameters connection TransportConnection ForceUpdate() public virtual void ForceUpdate() Init() public virtual void Init() PollEvents() public abstract void PollEvents() Run(RunMode, int) public abstract void Run(RunMode mode, int port) Parameters mode RunMode port int Shutdown() public abstract void Shutdown()"
  },
  "api/Netick.NetworkTransportProvider.html": {
    "href": "api/Netick.NetworkTransportProvider.html",
    "title": "Class NetworkTransportProvider | Netick Networking Engine",
    "keywords": "Class NetworkTransportProvider Namespace Netick Assembly Netick.Unity.dll public abstract class NetworkTransportProvider : ScriptableObject Inheritance object Object ScriptableObject NetworkTransportProvider Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NetworkTransportProvider() protected NetworkTransportProvider() Methods MakeTransportInstance() public abstract NetworkTransport MakeTransportInstance() Returns NetworkTransport"
  },
  "api/Netick.Networked.html": {
    "href": "api/Netick.Networked.html",
    "title": "Class Networked | Netick Networking Engine",
    "keywords": "Class Networked Namespace Netick Assembly Netick.dll public class Networked : Attribute Inheritance object Attribute Networked Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Networked(int, Relevancy, float) public Networked(int size = 1, Relevancy relevancy = Relevancy.Everyone, float precision = -1) Parameters size int relevancy Relevancy precision float"
  },
  "api/Netick.NotClientException.html": {
    "href": "api/Netick.NotClientException.html",
    "title": "Class NotClientException | Netick Networking Engine",
    "keywords": "Class NotClientException Namespace Netick Assembly Netick.dll public sealed class NotClientException : Exception, ISerializable Inheritance object Exception NotClientException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NotClientException(string, Exception) Constructs a NotClientException with a message and a inner exception public NotClientException(string message, Exception inner) Parameters message string The exception message inner Exception The inner exception"
  },
  "api/Netick.NotServerException.html": {
    "href": "api/Netick.NotServerException.html",
    "title": "Class NotServerException | Netick Networking Engine",
    "keywords": "Class NotServerException Namespace Netick Assembly Netick.dll public sealed class NotServerException : Exception, ISerializable Inheritance object Exception NotServerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NotServerException() Constructs a NotServerException public NotServerException() NotServerException(string) Constructs a NotServerException with a message public NotServerException(string message) Parameters message string The exception message NotServerException(string, Exception) Constructs a NotServerException with a message and a inner exception public NotServerException(string message, Exception inner) Parameters message string The exception message inner Exception The inner exception"
  },
  "api/Netick.ObjectList.html": {
    "href": "api/Netick.ObjectList.html",
    "title": "Class ObjectList | Netick Networking Engine",
    "keywords": "Class ObjectList Namespace Netick Assembly Netick.Unity.dll public sealed class ObjectList : IEnumerable<NetworkObject>, IEnumerable Inheritance object ObjectList Implements IEnumerable<NetworkObject> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetEnumerator() public IEnumerator<NetworkObject> GetEnumerator() Returns IEnumerator<NetworkObject>"
  },
  "api/Netick.OnChanged.html": {
    "href": "api/Netick.OnChanged.html",
    "title": "Class OnChanged | Netick Networking Engine",
    "keywords": "Class OnChanged Namespace Netick Assembly Netick.dll Use this attribute on a method you want to call when a specific property value changes. Example: [OnChanged(nameof(PropertyName)] Note: if used on network array, the method should have one parameter to be used as an index. If not used on an array, it should be parameterless. [AttributeUsage(AttributeTargets.Method, Inherited = true, AllowMultiple = false)] public class OnChanged : Attribute Inheritance object Attribute OnChanged Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnChanged(string) public OnChanged(string propertyName) Parameters propertyName string"
  },
  "api/Netick.OnChangedEvent.html": {
    "href": "api/Netick.OnChangedEvent.html",
    "title": "Delegate OnChangedEvent | Netick Networking Engine",
    "keywords": "Delegate OnChangedEvent Namespace Netick Assembly Netick.dll public delegate void OnChangedEvent(INetickScript beh, ChangedInfo changeInfo) Parameters beh INetickScript changeInfo ChangedInfo Constructors OnChangedEvent(object, IntPtr) public OnChangedEvent(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(INetickScript, ChangedInfo, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(INetickScript beh, ChangedInfo changeInfo, AsyncCallback callback, object @object) Parameters beh INetickScript changeInfo ChangedInfo callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(INetickScript, ChangedInfo) public virtual void Invoke(INetickScript beh, ChangedInfo changeInfo) Parameters beh INetickScript changeInfo ChangedInfo"
  },
  "api/Netick.OnClientConnectedDelegate.html": {
    "href": "api/Netick.OnClientConnectedDelegate.html",
    "title": "Delegate OnClientConnectedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnClientConnectedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnClientConnectedDelegate(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection Constructors OnClientConnectedDelegate(object, IntPtr) public OnClientConnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection"
  },
  "api/Netick.OnClientDisconnectedDelegate.html": {
    "href": "api/Netick.OnClientDisconnectedDelegate.html",
    "title": "Delegate OnClientDisconnectedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnClientDisconnectedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnClientDisconnectedDelegate(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason Constructors OnClientDisconnectedDelegate(object, IntPtr) public OnClientDisconnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.OnClientSceneLoadedDelegate.html": {
    "href": "api/Netick.OnClientSceneLoadedDelegate.html",
    "title": "Delegate OnClientSceneLoadedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnClientSceneLoadedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnClientSceneLoadedDelegate(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection Constructors OnClientSceneLoadedDelegate(object, IntPtr) public OnClientSceneLoadedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection client, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox client NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection"
  },
  "api/Netick.OnConnectFailed.html": {
    "href": "api/Netick.OnConnectFailed.html",
    "title": "Delegate OnConnectFailed | Netick Networking Engine",
    "keywords": "Delegate OnConnectFailed Namespace Netick Assembly Netick.dll public delegate void OnConnectFailed(IEndPoint address, ConnectionFailedReason reason) Parameters address IEndPoint reason ConnectionFailedReason Constructors OnConnectFailed(object, IntPtr) public OnConnectFailed(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(IEndPoint, ConnectionFailedReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(IEndPoint address, ConnectionFailedReason reason, AsyncCallback callback, object @object) Parameters address IEndPoint reason ConnectionFailedReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(IEndPoint, ConnectionFailedReason) public virtual void Invoke(IEndPoint address, ConnectionFailedReason reason) Parameters address IEndPoint reason ConnectionFailedReason"
  },
  "api/Netick.OnConnectFailedDelegate.html": {
    "href": "api/Netick.OnConnectFailedDelegate.html",
    "title": "Delegate OnConnectFailedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnConnectFailedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnConnectFailedDelegate(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason Constructors OnConnectFailedDelegate(object, IntPtr) public OnConnectFailedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, ConnectionFailedReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, ConnectionFailedReason reason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox reason ConnectionFailedReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, ConnectionFailedReason) public virtual void Invoke(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason"
  },
  "api/Netick.OnConnectRequestDelegate.html": {
    "href": "api/Netick.OnConnectRequestDelegate.html",
    "title": "Delegate OnConnectRequestDelegate | Netick Networking Engine",
    "keywords": "Delegate OnConnectRequestDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnConnectRequestDelegate(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest Constructors OnConnectRequestDelegate(object, IntPtr) public OnConnectRequestDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnectionRequest, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnectionRequest request, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox request NetworkConnectionRequest callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnectionRequest) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest"
  },
  "api/Netick.OnConnectedToServerDelegate.html": {
    "href": "api/Netick.OnConnectedToServerDelegate.html",
    "title": "Delegate OnConnectedToServerDelegate | Netick Networking Engine",
    "keywords": "Delegate OnConnectedToServerDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnConnectedToServerDelegate(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection Constructors OnConnectedToServerDelegate(object, IntPtr) public OnConnectedToServerDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection"
  },
  "api/Netick.OnDisconnectedFromServerDelegate.html": {
    "href": "api/Netick.OnDisconnectedFromServerDelegate.html",
    "title": "Delegate OnDisconnectedFromServerDelegate | Netick Networking Engine",
    "keywords": "Delegate OnDisconnectedFromServerDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnDisconnectedFromServerDelegate(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason Constructors OnDisconnectedFromServerDelegate(object, IntPtr) public OnDisconnectedFromServerDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.OnEntityDestroyedDelegate.html": {
    "href": "api/Netick.OnEntityDestroyedDelegate.html",
    "title": "Delegate OnEntityDestroyedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnEntityDestroyedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnEntityDestroyedDelegate(NetworkObject entity) Parameters entity NetworkObject Constructors OnEntityDestroyedDelegate(object, IntPtr) public OnEntityDestroyedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkObject, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkObject entity, AsyncCallback callback, object @object) Parameters entity NetworkObject callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkObject) public virtual void Invoke(NetworkObject entity) Parameters entity NetworkObject"
  },
  "api/Netick.OnInputReadDelegate.html": {
    "href": "api/Netick.OnInputReadDelegate.html",
    "title": "Delegate OnInputReadDelegate | Netick Networking Engine",
    "keywords": "Delegate OnInputReadDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnInputReadDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnInputReadDelegate(object, IntPtr) public OnInputReadDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnMatchCreatedDelegate.html": {
    "href": "api/Netick.OnMatchCreatedDelegate.html",
    "title": "Delegate OnMatchCreatedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnMatchCreatedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnMatchCreatedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnMatchCreatedDelegate(object, IntPtr) public OnMatchCreatedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnMatchListUpdateDelegate.html": {
    "href": "api/Netick.OnMatchListUpdateDelegate.html",
    "title": "Delegate OnMatchListUpdateDelegate | Netick Networking Engine",
    "keywords": "Delegate OnMatchListUpdateDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnMatchListUpdateDelegate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> Constructors OnMatchListUpdateDelegate(object, IntPtr) public OnMatchListUpdateDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, List<Session>, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, List<Session> sessions, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox sessions List<Session> callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, List<Session>) public virtual void Invoke(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session>"
  },
  "api/Netick.OnNetworkReceive.html": {
    "href": "api/Netick.OnNetworkReceive.html",
    "title": "Delegate OnNetworkReceive | Netick Networking Engine",
    "keywords": "Delegate OnNetworkReceive Namespace Netick Assembly Netick.dll public delegate void OnNetworkReceive(Connection peer, BitBuffer reader) Parameters peer Connection reader BitBuffer Constructors OnNetworkReceive(object, IntPtr) public OnNetworkReceive(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(Connection, BitBuffer, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Connection peer, BitBuffer reader, AsyncCallback callback, object @object) Parameters peer Connection reader BitBuffer callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(Connection, BitBuffer) public virtual void Invoke(Connection peer, BitBuffer reader) Parameters peer Connection reader BitBuffer"
  },
  "api/Netick.OnObjectCreatedDelegate.html": {
    "href": "api/Netick.OnObjectCreatedDelegate.html",
    "title": "Delegate OnObjectCreatedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnObjectCreatedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnObjectCreatedDelegate(NetworkObject entity) Parameters entity NetworkObject Constructors OnObjectCreatedDelegate(object, IntPtr) public OnObjectCreatedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkObject, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkObject entity, AsyncCallback callback, object @object) Parameters entity NetworkObject callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkObject) public virtual void Invoke(NetworkObject entity) Parameters entity NetworkObject"
  },
  "api/Netick.OnPeerConnected.html": {
    "href": "api/Netick.OnPeerConnected.html",
    "title": "Delegate OnPeerConnected | Netick Networking Engine",
    "keywords": "Delegate OnPeerConnected Namespace Netick Assembly Netick.dll public delegate void OnPeerConnected(Connection peer) Parameters peer Connection Constructors OnPeerConnected(object, IntPtr) public OnPeerConnected(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(Connection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Connection peer, AsyncCallback callback, object @object) Parameters peer Connection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(Connection) public virtual void Invoke(Connection peer) Parameters peer Connection"
  },
  "api/Netick.OnPeerDisconnected.html": {
    "href": "api/Netick.OnPeerDisconnected.html",
    "title": "Delegate OnPeerDisconnected | Netick Networking Engine",
    "keywords": "Delegate OnPeerDisconnected Namespace Netick Assembly Netick.dll public delegate void OnPeerDisconnected(Connection peer, TransportDisconnectReason disconnectReason) Parameters peer Connection disconnectReason TransportDisconnectReason Constructors OnPeerDisconnected(object, IntPtr) public OnPeerDisconnected(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(Connection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Connection peer, TransportDisconnectReason disconnectReason, AsyncCallback callback, object @object) Parameters peer Connection disconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(Connection, TransportDisconnectReason) public virtual void Invoke(Connection peer, TransportDisconnectReason disconnectReason) Parameters peer Connection disconnectReason TransportDisconnectReason"
  },
  "api/Netick.OnSceneLoadStartedDelegate.html": {
    "href": "api/Netick.OnSceneLoadStartedDelegate.html",
    "title": "Delegate OnSceneLoadStartedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnSceneLoadStartedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnSceneLoadStartedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnSceneLoadStartedDelegate(object, IntPtr) public OnSceneLoadStartedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnSceneLoadedDelegate.html": {
    "href": "api/Netick.OnSceneLoadedDelegate.html",
    "title": "Delegate OnSceneLoadedDelegate | Netick Networking Engine",
    "keywords": "Delegate OnSceneLoadedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnSceneLoadedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnSceneLoadedDelegate(object, IntPtr) public OnSceneLoadedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnShutdownDelegate.html": {
    "href": "api/Netick.OnShutdownDelegate.html",
    "title": "Delegate OnShutdownDelegate | Netick Networking Engine",
    "keywords": "Delegate OnShutdownDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnShutdownDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnShutdownDelegate(object, IntPtr) public OnShutdownDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnStartupDelegate.html": {
    "href": "api/Netick.OnStartupDelegate.html",
    "title": "Delegate OnStartupDelegate | Netick Networking Engine",
    "keywords": "Delegate OnStartupDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnStartupDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnStartupDelegate(object, IntPtr) public OnStartupDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.PhysicsSimulationStep.html": {
    "href": "api/Netick.PhysicsSimulationStep.html",
    "title": "Class PhysicsSimulationStep | Netick Networking Engine",
    "keywords": "Class PhysicsSimulationStep Namespace Netick Assembly Netick.Unity.dll [ExecutionOrder(1000)] public sealed class PhysicsSimulationStep : NetickCoreComponent, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetickCoreComponent PhysicsSimulationStep Implements INetickScript Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Methods NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate()"
  },
  "api/Netick.PhysicsType.html": {
    "href": "api/Netick.PhysicsType.html",
    "title": "Enum PhysicsType | Netick Networking Engine",
    "keywords": "Enum PhysicsType Namespace Netick Assembly Netick.Unity.dll public enum PhysicsType Fields None = 0 Physics2D = 2 Physics3D = 1"
  },
  "api/Netick.ProfilerManager.html": {
    "href": "api/Netick.ProfilerManager.html",
    "title": "Class ProfilerManager | Netick Networking Engine",
    "keywords": "Class ProfilerManager Namespace Netick Assembly Netick.Unity.dll public class ProfilerManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProfilerManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors ProfilerManager() public ProfilerManager() Fields Instance public static ProfilerManager Instance Field Value ProfilerManager _profilerList public static List<NetcodeProfiler> _profilerList Field Value List<NetcodeProfiler> Methods AddProfiler(NetcodeProfiler) public void AddProfiler(NetcodeProfiler profiler) Parameters profiler NetcodeProfiler OnGUI() public void OnGUI()"
  },
  "api/Netick.ReflectionData.html": {
    "href": "api/Netick.ReflectionData.html",
    "title": "Class ReflectionData | Netick Networking Engine",
    "keywords": "Class ReflectionData Namespace Netick Assembly Netick.dll public sealed class ReflectionData Inheritance object ReflectionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReflectionData(string[]) public ReflectionData(string[] assemblies) Parameters assemblies string[] Fields Assemblies public List<Assembly> Assemblies Field Value List<Assembly> Methods AssemblyIsLoaded(string) public bool AssemblyIsLoaded(string name) Parameters name string Returns bool"
  },
  "api/Netick.Relevancy.html": {
    "href": "api/Netick.Relevancy.html",
    "title": "Enum Relevancy | Netick Networking Engine",
    "keywords": "Enum Relevancy Namespace Netick Assembly Netick.dll public enum Relevancy Fields Everyone = 1 InputSource = 0"
  },
  "api/Netick.RemoteInterpolation.html": {
    "href": "api/Netick.RemoteInterpolation.html",
    "title": "Class RemoteInterpolation | Netick Networking Engine",
    "keywords": "Class RemoteInterpolation Namespace Netick Assembly Netick.dll A class representing the local interpolation of this instance NetickEngine. This should be used whenever you want to use Remote Timeline on the client. public sealed class RemoteInterpolation : Interpolation Inheritance object Interpolation RemoteInterpolation Inherited Members Interpolation.FromSnapshot Interpolation.ToSnapshot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Alpha public override float Alpha { get; } Property Value float BufferTime public float BufferTime { get; } Property Value float From public override Tick From { get; } Property Value Tick HasSnapshots public override bool HasSnapshots { get; } Property Value bool Time Time in seconds. public override float Time { get; } Property Value float To public override Tick To { get; } Property Value Tick Methods Reset() public void Reset()"
  },
  "api/Netick.ReplicationMode.html": {
    "href": "api/Netick.ReplicationMode.html",
    "title": "Enum ReplicationMode | Netick Networking Engine",
    "keywords": "Enum ReplicationMode Namespace Netick Assembly Netick.dll public enum ReplicationMode Fields Optimistic = 0 Pessimistic = 1"
  },
  "api/Netick.ResetOnSceneSwitch.html": {
    "href": "api/Netick.ResetOnSceneSwitch.html",
    "title": "Interface ResetOnSceneSwitch | Netick Networking Engine",
    "keywords": "Interface ResetOnSceneSwitch Namespace Netick Assembly Netick.Unity.dll public interface ResetOnSceneSwitch Methods OnSceneSwitchStart() void OnSceneSwitchStart()"
  },
  "api/Netick.Rpc.html": {
    "href": "api/Netick.Rpc.html",
    "title": "Class Rpc | Netick Networking Engine",
    "keywords": "Class Rpc Namespace Netick Assembly Netick.dll Use this attribute on any method you want to make an RPC. Should have the return type of void, and not be static. * Use the parameter \"source\" to specify who is allowed to send this RPC. * Use the parameter \"target\" to specify who is allowed to receive and execute this RPC. * Use the parameter \"isReliable\" to specify if this Rpc should be reliable or not, meaning it won't be lost (due to packet loss). * Use the parameter \"localInvoke\" to specify if this Rpc should be executed on the machine it was called from. [AttributeUsage(AttributeTargets.Method, Inherited = true, AllowMultiple = false)] public class Rpc : Attribute Inheritance object Attribute Rpc Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Rpc(RpcPeers, RpcPeers, bool, bool) public Rpc(RpcPeers source = RpcPeers.Everyone, RpcPeers target = RpcPeers.Everyone, bool isReliable = false, bool localInvoke = false) Parameters source RpcPeers target RpcPeers isReliable bool localInvoke bool"
  },
  "api/Netick.RpcPeers.html": {
    "href": "api/Netick.RpcPeers.html",
    "title": "Enum RpcPeers | Netick Networking Engine",
    "keywords": "Enum RpcPeers Namespace Netick Assembly Netick.dll public enum RpcPeers Fields Everyone = 3 InputSource = 1 Owner = 0 Proxies = 2"
  },
  "api/Netick.RunMode.html": {
    "href": "api/Netick.RunMode.html",
    "title": "Enum RunMode | Netick Networking Engine",
    "keywords": "Enum RunMode Namespace Netick Assembly Netick.dll public enum RunMode Fields Client = 1 Server = 0"
  },
  "api/Netick.Server.html": {
    "href": "api/Netick.Server.html",
    "title": "Class Server | Netick Networking Engine",
    "keywords": "Class Server Namespace Netick Assembly Netick.dll public sealed class Server : NetworkPeer Inheritance object NetworkPlayer NetworkPeer Server Inherited Members NetworkPeer.OnConnectRequest(byte[], int, IPEndPoint) NetworkPlayer.Engine NetworkPlayer.Position NetworkPlayer.CellPosition NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties InKBps public override float InKBps { get; } Property Value float OutKBps public override float OutKBps { get; } Property Value float Methods Kick(ServerConnection) public void Kick(ServerConnection client) Parameters client ServerConnection OnConnectFailed(ConnectionFailedReason) public override void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnected(TransportConnection) public override void OnConnected(TransportConnection peer) Parameters peer TransportConnection OnDisconnected(TransportConnection, TransportDisconnectReason) public override void OnDisconnected(TransportConnection peer, TransportDisconnectReason transportDisconnectReason) Parameters peer TransportConnection transportDisconnectReason TransportDisconnectReason Receive(TransportConnection, BitBuffer) public override void Receive(TransportConnection connection, BitBuffer buffer) Parameters connection TransportConnection buffer BitBuffer"
  },
  "api/Netick.ServerConnection.html": {
    "href": "api/Netick.ServerConnection.html",
    "title": "Class ServerConnection | Netick Networking Engine",
    "keywords": "Class ServerConnection Namespace Netick Assembly Netick.dll public sealed class ServerConnection : NetworkConnection Inheritance object NetworkPlayer NetworkConnection ServerConnection Inherited Members NetworkConnection.RemoteUserData NetworkConnection.LocalUserData NetworkConnection.MaxOutgoingDataPerTickInBytes NetworkConnection.SendEntities NetworkConnection.EndPoint NetworkConnection.BytesIn NetworkConnection.BytesOut NetworkPlayer.Engine NetworkPlayer.Position NetworkPlayer.CellPosition NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ServerConnection(int, TransportConnection, NetickEngine) public ServerConnection(int clientIndex, TransportConnection netPeer, NetickEngine sandbox) Parameters clientIndex int netPeer TransportConnection sandbox NetickEngine Fields SimulationData public readonly ClientData SimulationData Field Value ClientData Methods OnAck(Tick, bool) public void OnAck(Tick tick, bool isEC) Parameters tick Tick isEC bool"
  },
  "api/Netick.ServerSimulation.html": {
    "href": "api/Netick.ServerSimulation.html",
    "title": "Class ServerSimulation | Netick Networking Engine",
    "keywords": "Class ServerSimulation Namespace Netick Assembly Netick.dll public sealed class ServerSimulation : Simulation Inheritance object Simulation ServerSimulation Inherited Members Simulation.FetchInputLocal<T>(out T) Simulation.GetInput<T>() Simulation.SetInput<T>(T) Simulation.CurrentInput object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods FetchInputFor<T>(int, out T) public bool FetchInputFor<T>(int cliIndex, out T input) where T : unmanaged Parameters cliIndex int input T Returns bool Type Parameters T"
  },
  "api/Netick.Session.html": {
    "href": "api/Netick.Session.html",
    "title": "Struct Session | Netick Networking Engine",
    "keywords": "Struct Session Namespace Netick Assembly Netick.dll public struct Session : IEquatable<Session> Implements IEquatable<Session> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields IP public string IP Field Value string Name public string Name Field Value string Port public int Port Field Value int Methods Equals(Session) public bool Equals(Session other) Parameters other Session Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Netick.SimulatedPeer.html": {
    "href": "api/Netick.SimulatedPeer.html",
    "title": "Class SimulatedPeer | Netick Networking Engine",
    "keywords": "Class SimulatedPeer Namespace Netick Assembly Netick.Unity.dll public class SimulatedPeer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimulatedPeer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors SimulatedPeer() public SimulatedPeer() Fields DumbClient public bool DumbClient Field Value bool IsClient public bool IsClient Field Value bool Peer public Client Peer Field Value Client"
  },
  "api/Netick.Simulation.html": {
    "href": "api/Netick.Simulation.html",
    "title": "Class Simulation | Netick Networking Engine",
    "keywords": "Class Simulation Namespace Netick Assembly Netick.dll public abstract class Simulation Inheritance object Simulation Derived ClientSimulation ServerSimulation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentInput public SimulationInput CurrentInput { get; } Property Value SimulationInput Methods FetchInputLocal<T>(out T) public bool FetchInputLocal<T>(out T input) where T : unmanaged Parameters input T Returns bool Type Parameters T GetInput<T>() public T GetInput<T>() where T : unmanaged Returns T Type Parameters T SetInput<T>(T) public void SetInput<T>(T input) where T : unmanaged Parameters input T Type Parameters T"
  },
  "api/Netick.SimulationClock.html": {
    "href": "api/Netick.SimulationClock.html",
    "title": "Class SimulationClock | Netick Networking Engine",
    "keywords": "Class SimulationClock Namespace Netick Assembly Netick.dll public sealed class SimulationClock Inheritance object SimulationClock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Alpha public float Alpha Field Value float Properties DeltaTime public float DeltaTime { get; } Property Value float FixedDelta public float FixedDelta { get; } Property Value float"
  },
  "api/Netick.SimulationInput.html": {
    "href": "api/Netick.SimulationInput.html",
    "title": "Class SimulationInput | Netick Networking Engine",
    "keywords": "Class SimulationInput Namespace Netick Assembly Netick.dll public class SimulationInput Inheritance object SimulationInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationInput() public SimulationInput() Fields Alpha public float Alpha Field Value float SrvTick public Tick SrvTick Field Value Tick"
  },
  "api/Netick.SingleInstanceEnforcer.html": {
    "href": "api/Netick.SingleInstanceEnforcer.html",
    "title": "Class SingleInstanceEnforcer | Netick Networking Engine",
    "keywords": "Class SingleInstanceEnforcer Namespace Netick Assembly Netick.Unity.dll Add this component to a GameObject to ensure only a single instance of it will exist at the same time, across all sandboxes. [AddComponentMenu(\"Netick/Single Instance Enforcer\")] [DisallowMultipleComponent] public class SingleInstanceEnforcer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SingleInstanceEnforcer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors SingleInstanceEnforcer() public SingleInstanceEnforcer()"
  },
  "api/Netick.Smoothed.html": {
    "href": "api/Netick.Smoothed.html",
    "title": "Class Smoothed | Netick Networking Engine",
    "keywords": "Class Smoothed Namespace Netick Assembly Netick.dll public class Smoothed : Attribute Inheritance object Attribute Smoothed Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Smoothed() public Smoothed()"
  },
  "api/Netick.SpawnPredictionKey.html": {
    "href": "api/Netick.SpawnPredictionKey.html",
    "title": "Struct SpawnPredictionKey | Netick Networking Engine",
    "keywords": "Struct SpawnPredictionKey Namespace Netick Assembly Netick.dll public struct SpawnPredictionKey : IEquatable<SpawnPredictionKey> Implements IEquatable<SpawnPredictionKey> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SpawnPredictionKey(byte, byte, byte, byte) public SpawnPredictionKey(byte part1 = 0, byte part2 = 0, byte part3 = 0, byte part4 = 0) Parameters part1 byte part2 byte part3 byte part4 byte Fields IsValid public readonly bool IsValid Field Value bool RawValue public readonly uint RawValue Field Value uint Properties Invalid public static SpawnPredictionKey Invalid { get; } Property Value SpawnPredictionKey Methods Equals(SpawnPredictionKey) public bool Equals(SpawnPredictionKey other) Parameters other SpawnPredictionKey Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Netick.StartMode.html": {
    "href": "api/Netick.StartMode.html",
    "title": "Enum StartMode | Netick Networking Engine",
    "keywords": "Enum StartMode Namespace Netick Assembly Netick.Unity.dll Manages Netick and its sandboxes, and is used to start and shut down Netick. public enum StartMode Fields Client = 1 Server = 0 ServerAndClient = 2"
  },
  "api/Netick.StructExample.html": {
    "href": "api/Netick.StructExample.html",
    "title": "Struct StructExample | Netick Networking Engine",
    "keywords": "Struct StructExample Namespace Netick Assembly Netick.Unity.dll public struct StructExample Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields A1 public int A1 Field Value int A2 public int A2 Field Value int A3 public int A3 Field Value int"
  },
  "api/Netick.Tick.html": {
    "href": "api/Netick.Tick.html",
    "title": "Struct Tick | Netick Networking Engine",
    "keywords": "Struct Tick Namespace Netick Assembly Netick.dll public struct Tick : IEquatable<Tick> Implements IEquatable<Tick> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Tick(int) public Tick(int rawValue) Parameters rawValue int Fields Comparer public static readonly IEqualityComparer<Tick> Comparer Field Value IEqualityComparer<Tick> InvalidTick public static Tick InvalidTick Field Value Tick Properties IsValid public bool IsValid { get; } Property Value bool TickValue public int TickValue { get; } Property Value int Methods Equals(Tick) public bool Equals(Tick other) Parameters other Tick Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator +(Tick, int) public static Tick operator +(Tick a, int b) Parameters a Tick b int Returns Tick operator ==(Tick, Tick) public static bool operator ==(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator >(Tick, Tick) public static bool operator >(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator >=(Tick, Tick) public static bool operator >=(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator ++(Tick) public static Tick operator ++(Tick a) Parameters a Tick Returns Tick operator !=(Tick, Tick) public static bool operator !=(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator <(Tick, Tick) public static bool operator <(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator <=(Tick, Tick) public static bool operator <=(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator %(Tick, int) public static int operator %(Tick a, int b) Parameters a Tick b int Returns int operator -(Tick, Tick) public static int operator -(Tick a, Tick b) Parameters a Tick b Tick Returns int operator -(Tick, int) public static Tick operator -(Tick a, int b) Parameters a Tick b int Returns Tick"
  },
  "api/Netick.TrackedRigidbody2D.html": {
    "href": "api/Netick.TrackedRigidbody2D.html",
    "title": "Class TrackedRigidbody2D | Netick Networking Engine",
    "keywords": "Class TrackedRigidbody2D Namespace Netick Assembly Netick.Unity.dll public class TrackedRigidbody2D : TrackedRigidbodyBase Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase TrackedRigidbody2D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbody2D() public TrackedRigidbody2D() Properties IsKinematic public override bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public override void DestroyForNetick()"
  },
  "api/Netick.TrackedRigidbody3D.html": {
    "href": "api/Netick.TrackedRigidbody3D.html",
    "title": "Class TrackedRigidbody3D | Netick Networking Engine",
    "keywords": "Class TrackedRigidbody3D Namespace Netick Assembly Netick.Unity.dll public class TrackedRigidbody3D : TrackedRigidbodyBase Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase TrackedRigidbody3D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbody3D() public TrackedRigidbody3D() Properties IsKinematic public override bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public override void DestroyForNetick()"
  },
  "api/Netick.TrackedRigidbodyBase.html": {
    "href": "api/Netick.TrackedRigidbodyBase.html",
    "title": "Class TrackedRigidbodyBase | Netick Networking Engine",
    "keywords": "Class TrackedRigidbodyBase Namespace Netick Assembly Netick.Unity.dll public abstract class TrackedRigidbodyBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase Derived TrackedRigidbody2D TrackedRigidbody3D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbodyBase() protected TrackedRigidbodyBase() Properties IsKinematic public abstract bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public abstract void DestroyForNetick()"
  },
  "api/Netick.TransformSpace.html": {
    "href": "api/Netick.TransformSpace.html",
    "title": "Enum TransformSpace | Netick Networking Engine",
    "keywords": "Enum TransformSpace Namespace Netick Assembly Netick.Unity.dll public enum TransformSpace Fields Local = 0 World = 1"
  },
  "api/Netick.TransportConnection.html": {
    "href": "api/Netick.TransportConnection.html",
    "title": "Class TransportConnection | Netick Networking Engine",
    "keywords": "Class TransportConnection Namespace Netick Assembly Netick.dll public abstract class TransportConnection Inheritance object TransportConnection Derived NetickTransportConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TransportConnection() protected TransportConnection() Properties EndPoint public abstract IEndPoint EndPoint { get; } Property Value IEndPoint Mtu public abstract int Mtu { get; } Property Value int Methods Send(IntPtr, int) public abstract void Send(IntPtr ptr, int length) Parameters ptr IntPtr length int"
  },
  "api/Netick.TransportDisconnectReason.html": {
    "href": "api/Netick.TransportDisconnectReason.html",
    "title": "Enum TransportDisconnectReason | Netick Networking Engine",
    "keywords": "Enum TransportDisconnectReason Namespace Netick Assembly Netick.dll public enum TransportDisconnectReason Fields Kick = 1 Shutdown = 2 Timeout = 0"
  },
  "api/Netick.Utils.html": {
    "href": "api/Netick.Utils.html",
    "title": "Class Utils | Netick Networking Engine",
    "keywords": "Class Utils Namespace Netick Assembly Netick.dll public static class Utils Inheritance object Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ceiling(int) public static int Ceiling(int v) Parameters v int Returns int Clamp01(float) public static float Clamp01(float a) Parameters a float Returns float GetAllSubclassOf(Type) public static List<Type> GetAllSubclassOf(Type parent) Parameters parent Type Returns List<Type> GetMethodName(MethodInfo) public static string GetMethodName(MethodInfo method) Parameters method MethodInfo Returns string GetStableHashCode(string) public static int GetStableHashCode(this string str) Parameters str string Returns int GetWordSize(int) public static int GetWordSize(int byteSize) Parameters byteSize int Returns int Lerp(float, float, float) public static float Lerp(float a, float b, float t) Parameters a float b float t float Returns float LoadStringFromPtr(StringBuilder, int*, int) public static string LoadStringFromPtr(StringBuilder cache, int* ptr, int charCount) Parameters cache StringBuilder ptr int* charCount int Returns string PowerOfTwo(int) public static int PowerOfTwo(int depth) Parameters depth int Returns int SetPtrString(INetickNetworkScript, string, int*, int) public static void SetPtrString(INetickNetworkScript beh, string newVal, int* ptr, int charCount) Parameters beh INetickNetworkScript newVal string ptr int* charCount int"
  },
  "api/Netick.html": {
    "href": "api/Netick.html",
    "title": "Namespace Netick | Netick Networking Engine",
    "keywords": "Namespace Netick Classes Accumulator Allocator BadPacketException BitBuffer ChangedInfoExtension CircularList<T> Client ClientConnection ClientData ClientSimulation ComponentExtensions Connection ConsoleLogger CustomizableSocketTransport DefaultAllocator DoubleStats Entity ExecuteAfterAttribute ExecuteBeforeAttribute ExecutionList ExecutionOrderAttribute FloatStats GeneratedBehaviourExample Grid GridCellComp GridVisualiser IPEndPointExt IgnoreCodeGen Interpolation A class representing an abstract interpolation interface, which is implemented by RemoteInterpolation and LocalInterpolation LocalInterpolation A class representing the local interpolation of this instance NetickEngine. This should be used whenever you want to use Predicted Timeline on the client. NativeUDPSocket NetcodeProfiler NetickBehaviour NetickConfig Config class for Netick. NetickCoreComponent NetickEndPoint NetickEngine NetickList<T> NetickLogger NetickProfiler NetickTransport NetickTransportConnection NetickUniqueObjectMeta NetickUnityUtils Network NetworkAnimator NetworkArray NetworkArray<T> NetworkBehaviour NetworkChannel NetworkConnection NetworkConnectionRequest NetworkEvents NetworkEvents.OnClientConnectedEvent NetworkEvents.OnClientDisconnectedEvent NetworkEvents.OnClientSceneLoadeddEvent NetworkEvents.OnConnectFailedEvent NetworkEvents.OnConnectRequestEvent NetworkEvents.OnConnectedToServerEvent NetworkEvents.OnDisconnectedFromServerEvent NetworkEvents.OnInputEvent NetworkEvents.OnMatchCreatedEvent NetworkEvents.OnMatchListUpdateEvent NetworkEvents.OnObjectCreatedEvent NetworkEvents.OnObjectDestroyedEvent NetworkEvents.OnSceneLoadStartedEvent NetworkEvents.OnSceneLoadedEvent NetworkEvents.OnShutdownEvent NetworkEvents.OnStartupEvent NetworkEventsListner NetworkObject NetworkPeer NetworkPlayer Represents a network player, which can be either a local player (representing this sandbox) or a remote connection (representing a connected client)). NetworkPlayerExtension NetworkRigidbody This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody must be used if you want to have client-side prediction over PhysX objects since it replicates several other properties necessary for correct prediction. NetworkRpc NetworkSandbox NetworkTransform NetworkTransport NetworkTransportProvider Networked NotClientException NotServerException ObjectList OnChanged Use this attribute on a method you want to call when a specific property value changes. Example: [OnChanged(nameof(PropertyName)] Note: if used on network array, the method should have one parameter to be used as an index. If not used on an array, it should be parameterless. PhysicsSimulationStep ProfilerManager ReflectionData RemoteInterpolation A class representing the local interpolation of this instance NetickEngine. This should be used whenever you want to use Remote Timeline on the client. Rpc Use this attribute on any method you want to make an RPC. Should have the return type of void, and not be static. * Use the parameter \"source\" to specify who is allowed to send this RPC. * Use the parameter \"target\" to specify who is allowed to receive and execute this RPC. * Use the parameter \"isReliable\" to specify if this Rpc should be reliable or not, meaning it won't be lost (due to packet loss). * Use the parameter \"localInvoke\" to specify if this Rpc should be executed on the machine it was called from. Server ServerConnection ServerSimulation SimulatedPeer Simulation SimulationClock SimulationInput SingleInstanceEnforcer Add this component to a GameObject to ensure only a single instance of it will exist at the same time, across all sandboxes. Smoothed TrackedRigidbody2D TrackedRigidbody3D TrackedRigidbodyBase TransportConnection Utils Structs Allocator.MemoryPool ChangedInfo ChangedMethod Interpolator<T> A struct that is used to obtain interpolation data for a network property. NetickConfigData NetickEntityMeta NetickVector2Int NetickVector3 NetickVector3Int Network.Sandboxs NetworkString16 NetworkString32 NetworkString8 Session SpawnPredictionKey StructExample Tick Interfaces IEndPoint IGameEngine IMemoryAllocator INetickComponent INetickEntity INetickLogger INetickNetworkScript A network scripts which can have networked properties and rpcs. INetickScript A script which can be added to netick internal simulation loop. INetickSocket INetworkArray INetworkInput IPhysicsComponent ResetOnSceneSwitch Enums ConnectionFailedReason InterpolationMode NetworkRenderInvokeOrder NetworkTransformRepConditions PhysicsType Relevancy ReplicationMode RpcPeers RunMode StartMode Manages Netick and its sandboxes, and is used to start and shut down Netick. TransformSpace TransportDisconnectReason Delegates OnChangedEvent OnClientConnectedDelegate OnClientDisconnectedDelegate OnClientSceneLoadedDelegate OnConnectFailed OnConnectFailedDelegate OnConnectRequestDelegate OnConnectedToServerDelegate OnDisconnectedFromServerDelegate OnEntityDestroyedDelegate OnInputReadDelegate OnMatchCreatedDelegate OnMatchListUpdateDelegate OnNetworkReceive OnObjectCreatedDelegate OnPeerConnected OnPeerDisconnected OnSceneLoadStartedDelegate OnSceneLoadedDelegate OnShutdownDelegate OnStartupDelegate"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference for Netick | Netick Networking Engine",
    "keywords": "API Reference for Netick This is the API Reference for Netick."
  },
  "articles/README.html": {
    "href": "articles/README.html",
    "title": "Understanding Client-Server Model | Netick Networking Engine",
    "keywords": "Understanding Client-Server Model When programming a single-player game, you usually don’t care about making sure the behavior and actions of players are legal, because it ultimately doesn’t matter since the game runs completely on their machine, and it’s impossible to prevent cheating when the client (player) has full access to everything related to the game. Because there is no central authority dictating the flow of the game, and enforcing the game rules and mechanics. That’s why it’s extremely easy to cheat in peer-to-peer games (where every player is connected to everyone else and everyone can decide whatever they want). Each client can interpret the outcome of the game however it wants. This is the problem that the client-server model solves. In this model, rather than connecting the players to each other, every player is simply connected to a single node/machine called the server. In a perfect client-server implementation, the client simply sends inputs (which describe what they want to happen, e.g. moving, shooting) and the server basically responds by sending back the resultant game state to that input. Therefore the server is the one who executes the inputs and so there is no way for the client to cheat. Netick implements the client-server model + client-side prediction. You will see later how to construct these inputs and states to create your server-authoritative gameplay systems."
  },
  "articles/SUMMARY.html": {
    "href": "articles/SUMMARY.html",
    "title": "Table of contents | Netick Networking Engine",
    "keywords": "Table of contents Understanding Client-Server Model Core Concepts Network State Change Callback Remote Procedure Calls (RPCs) RPCs vs Properties Listening to Network Events Understanding Client-Side Prediction Writing Client-Side Prediction code Interpolation Lag Compensation Network Object Instantiation and Destruction Network Prefab Pool Parenting Managing Netick Script Execution Order"
  },
  "articles/change-callback.html": {
    "href": "articles/change-callback.html",
    "title": "Change Callback | Netick Networking Engine",
    "keywords": "Change Callback For Properties You can have a method get called whenever a networked property changes, which is very useful. To do that, add the attribute [OnChanged] to the method and give it the name of the property. The method must have one parameter of the same type of the property which would contain its previous value. Example: [Networked] public int Health { get; set; } [OnChanged(nameof(Health ))] private void OnHealthChanged(int previous) { // Something that happens when the Health property changes } For Arrays If you have an array and want a callback for when an element changes, you can do so as follows: Example: [Networked(size: 10)] public NetworkArray<int> Items { get; set; } [OnChanged(nameof(Items))] private void ArrayChanged(int index) { // Something that happens when an element of the array changes } The difference here to a variable property is that the callback method must have an index parameter that points to the changed element."
  },
  "articles/core-concepts.html": {
    "href": "articles/core-concepts.html",
    "title": "Core Concepts | Netick Networking Engine",
    "keywords": "Core Concepts Network Sandbox Network Sandbox is what controls the whole network simulation. It can be thought of as the manager of the simulation. You can have more than one network sandbox in a single Unity game, and that happens when you start both a client and a server on the same project. This can be extremely useful for testing/debugging, because it allows you to run a server and a client (or multiple thereof) in the same project and therefore see what happens at both at the same time, without interference. Therefore you can think of a sandbox as representing a server or a client. You can show/hide the current sandboxes from the Network Sandboxes panel. Network Object Any GameObject which needs to be synced/replicated must be a Network Object (has the Network Object added to it). If you want to see something on everyone’s screen, it has to have a Network Object component added to it. It’s the component that tells Netick that a GameObject is networked. The Network Object component by itself just informs Netick that the object is networked. To add networked gameplay-logic to it, you must do so in a component of a class derived from Network Behavior. Netick comes with a few essential built-in components: Network Transform: used to sync position and rotation Network Rigidbody: used to sync controllable physical objects Network Animator: used to sync Unity’s animator’s state Network Behavior The Network Behavior class is your old friend MonoBehaviour, just the networked version of it. To implement your networked functionality, just create a new class and derive it from NetworkBehavior. You have several methods you can override which correspond to Unity’s non-networked equivalents (they must be used instead of Unity’s equivalents when doing anything related to the network simulation): NetworkStart NetworkDestroy NetworkFixedUpdate NetworkUpdate NetworkRender Example: using System.Collections; using System.Collections.Generic; using UnityEngine; using Netick; public class MyBehaviour : NetworkBehaviour { [Networked] public int IntPropertyExample { get; set;} [Networked] public float FloatPropertyExample { get; set;} public override void NetworkStart() { // Called when this object has been added to the simulation. } public override void NetworkDestroy() { // Called when this object has been removed from the simulation. } public override void NetworkUpdate() { // Called every frame. Executed before NetworkFixedUpdate. } public override void NetworkRender() { // Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. // IMPORTANT NOTE: properties (which can be interpolated) marked with [Smooth] attribute will return interpolated values when accessed in this method. } public override void NetworkFixedUpdate() { // Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. // Check out the chapter named \"Writing Client-Side Prediction code\" to learn more about this method. } } Don’t forget to include using Netick A class derived from Networked Behavior is almost useless without the utilization of Network Properties, which are the building blocks of your networked synced state. These properties are ensured to be eventually synced to everyone in the network, letting you create objects with complex states and not worry about it."
  },
  "articles/interpolation.html": {
    "href": "articles/interpolation.html",
    "title": "Interpolation | Netick Networking Engine",
    "keywords": "Interpolation Netick runs at a fixed-time step, the same as the Time.fixedDeltaTime of Unity, which you can specify in the Project Settings. Because of that, the motion of network objects will appear unsmooth and jittery. The reason for this is that, usually, your update rate (render rate) is way higher than your fixed network tick rate. The solution to this problem is called interpolation, which means filling in the gaps between these fixed-time steps/ticks: So, for example, at tick 6, the value of a network property is 2.0. And at tick 7, it becomes 3.0. Since there are 5 frames between two ticks, the values at each frame would be: Frame 1: 2.0 — Beginning of tick 6 Frame 2: 2.25 Frame 3: 2.5 Frame 4: 2.75 Frame 5: 3 — End of tick 6, beginning of tick 7 Interpolation of Network Transform For moving objects, this is important to deal with. Every NetworkTransform has a slot for a Render transform, which is basically the smoothed/interpolated mesh of the object, while the parent would be the simulated/non-interpolated object. So, you must break your moving objects into a parent (which has the NetworkTransform), and a child which is the interpolated object, and has the mesh/s. Then you specify that child in the Network Transform Render Transform property in the inspector. Check the samples if you are confused. Interpolation of Network Properties To interpolate a property, add the [Smooth] attribute to its declaration: [Networked][Smooth] public Vector3 Movement {get; set;} Accessing Interpolated Values To access the interpolated value, by referencing the property in NetworkRender, you automatically get interpolated values: public override NetworkRender() { var interpolatedValue = Movement; } Interpolation is implemented by Netick on these types: Float Double Vector2/Vector3 Quaternion Other types just return the From snapshot between the two snapshots being interpolated. Interpolation of Other Types To interpolate other types, you can do that using the Interpolator<T> object. First, you must include an id in [Smooth]: [Networked][Smooth(6)] public MyType SomeProperty {get; set;} And to access the interpolated value, you first need to acquire a reference to the Interpolator object, through which you can get the From and To values, and the Alpha, which you use to interpolate the property. public override NetworkRender() { var interpolator = FindInterpolator<MyType>(6); var from = interpolator.From; var to = interpolator.To; var alpha = interpolator.Alpha; var interpolatedValue = LerpMyType(from,to,alpha); } private MyType LerpMyType(MyType from, MyType to, float alpha) { // write the interpolation code here } Note Note: you should cache the result to FindInterpolator<MyType>(5) on NetworkStart, instead of calling it repeatedly every frame (NetworkRender is called every frame), since it might be a bit slow."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Netick Networking Engine",
    "keywords": "Add your introductions here!"
  },
  "articles/lag-compensation.html": {
    "href": "articles/lag-compensation.html",
    "title": "Lag Compensation | Netick Networking Engine",
    "keywords": "Lag Compensation Lag Compensation Requires Premium. Click here to get Netick Premium Understanding the Need for Lag Compensation Due to varying latencies (ping) of connected players, each player will see the world at a different point in time than the server. For instance, when the client sends an input to the server to shoot its weapon, the target that the client was aiming at would be at a different place in the client than the server. Therefore the client would miss its shoots. Because, usually, from the perspective of the client, the positions of other objects (players) are in the remote snapshot timeline, which is always in the past compared to the timeline of the player-controlled character, which’s the predicted snapshot timeline. On the server, everything is in the present. While on the client, only the player-controlled character is in the present, while other players’ (proxies) positions are in the past. Though this is not always the case, because due to the ability of Netick to do full-world prediction, it’s possible to put proxies in the predicted snapshot timeline, in which case lag compensation wouldn’t be needed. So, what’s Lag Compensation? Lag Compensation basically means going back in time to what the client was seeing at the time of the shooting, and simulating its shooting in that past view. Question: why not just let the client tell the server the target that it hit and how much damage it dealt? Answer: we can’t trust the client. We should never trust the client, especially in game-critical aspects like applying damage. Lag Compensation gives us authority over hit detection. Watch this video for a visual explanation: Lag Compensation in Netick Setting up your character for Lag Compensation You have to add a HitShape component (commonly known as a hitbox) on every part of your character which can move. And in the root of your character, you have to add a HitShape Container component which will register all child HitShapes. HitShape on each bone HitShape Container on the root of the character. Performing a Lag-Compensated Raycast // lag-compensated raycast if (Sandbox.GetComponent<LagCompensation>().Raycast( shootPos, shootDirection, out var hit, Object.InputSource, Mathf.Infinity, includeUnityColliders: true, queryTriggerInteraction: QueryTriggerInteraction.Ignore)) { if (hit.HitShape != null) { // code to be executed when a HitShape was hit } } For a practical example, you might want to get our comprehensive Arena Shooter sample which covers everything we talked about and more: https://netick.net/arena-shooter-sample/"
  },
  "articles/listening-to-network-events.html": {
    "href": "articles/listening-to-network-events.html",
    "title": "Listening to Network Events | Netick Networking Engine",
    "keywords": "Listening to Network Events Netick has several useful callbacks you can use: Callbacks Description Invoke target OnStartup(NetworkSandbox sandbox) Called when Netick has been started. Client/Server OnShutdown(NetworkSandbox sandbox) Called when Netick has been shut down. Client/Server OnInput(NetworkSandbox sandbox) Called to read inputs. Client/Server OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. Server OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Called on the client when the connection to the server was refused, or simply failed. Client OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Called on the client when the connection to the server has succeeded. Client OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Called on the server when a specific client has connected. Server OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client) Called on the server when a specific client has disconnected. Server OnSceneLoaded(NetworkSandbox sandbox) Called on both the client and the server when the scene has been loaded. Client/Server OnSceneLoadStarted(NetworkSandbox sandbox) Called on both the client and the server before beginning to load the new scene. Client/Server OnClientSceneLoaded(NetworkSandbox sandbox, NetworkConnection client) Called on the server when a specific client finished loading the scene. Server OnObjectCreated(NetworkObject obj) Called when a network object has been created/initialized. Client/Server OnObjectDestroyed(NetworkObject obj) Called when a network object has been destroyed/recycled. Client/Server You can override these methods on a class inheriting from NetworkEventsListner, and add it to an object in the scene, and Netick will find it automatically. Or, you can add it to a network prefab that you instantiate, and Netick will also find it can call methods on it. You could also add the component NetworkEvents to an object, which does the same, but the difference is that you can plug your events right into it."
  },
  "articles/managing-netick.html": {
    "href": "articles/managing-netick.html",
    "title": "Managing Netick | Netick Networking Engine",
    "keywords": "Managing Netick Starting and Shutting Down Netick When you start Netick, you need to specify the mode you want to start it in. You can start it as a single sandbox, either a server or a client, like this: As a client: var sandbox = Netick.Network.StartAsClient(); As a server: var sandbox = Netick.Network.StartAsServer(); Or you can start both a client and a server together, like this: var sandboxes = Netick.Network.StartAsServerAndClient(Clients); To shut down Netick completely, call: Netick.Network.Shutdown(); Connecting to the Server To connect the client to the server, call Connect(serverIPAddress) on the sandbox representing the client: sandbox.Connect(serverIPAddress); Disconnecting from the server To disconnect the client, call Disconnect() on the sandbox representing the client: sandbox.Disconnect(); You are advised to have a game starting scene used for server finding/matchmaking. Scene Switching Scene To switch from the current scene to another, call SwitchScene(sceneIndex) on the sandbox: sandbox.SwitchScene(2); To find the index of a scene, open the Build Settings window where you will see a list of all added scenes. If the desired scene is not present, open that scene and add it to the list."
  },
  "articles/network-object-instantiation-and-destruction/README.html": {
    "href": "articles/network-object-instantiation-and-destruction/README.html",
    "title": "Network Object Instantiation and Destruction | Netick Networking Engine",
    "keywords": "Network Object Instantiation and Destruction To Instantiate a network prefab, call NetworkInstantiate on the Network Sandbox. sandbox.NetworkInstantiate(prefab) Normally, it’s only possible to instantiate network prefabs on the server. However, it’s possible to spawn-predict them on the client, check out the next section for that. To destroy any networked object: sandbox.Destroy(obj) This will destroy obj and all of its nested Network Objects. Should be called only from the server/owner, although it can also be used to destroy spawn-predicted objects on the client with invalid Ids. Warning Make sure to never use Unity’s instantiate/destroy methods to create/destroy a network object, only Netick’s methods. Warning Make sure that all your prefabs are registered by Netick in Netick Settings panel. And also make sure the prefab list is identical in both the client and the server (if you are running two Unity editors), otherwise, weird stuff will occur. Spawn-Prediction Spawn-Prediction allows you to instantiate/spawn network objects on the client, without having to wait for the server to spawn them. The client would create a local copy of the object, and when the server actually creates the object and the confirmation arrives on the client, the client version of that object would then obtain a valid network Id – meaning it now exists on the network and has been successfully spawn-predicted. How To Use To use Spawn-Prediction, you must pass a key (SpawnPredictionKey) to the NetworkInstantiate method. Notes on the key: The key must be unique between calls, and usually also between different clients. The key must be the same key when the NetworkInstantiate method is called on both the client and the server, for the object to correctly be spawned and confirmed on the network. When the client locally instantiates the object, and before the confirmation arrives from the server, the object would have an Id of -1 (invalid id). That means it has yet to be confirmed to have been spawned on the server. Using this knowledge, you can know whether or not the object has been successfully spawn-predicted at this point in time. If after a relatively long period the server has yet to create, and therefore confirm, the object, you can choose to destory it on the client. But It’s important to know that you mustn’t destroy objects, successfully spawn-predicted or not, on the client. Only objects, prefab instances precisely, which have -1 Id are allowed to be destroyed on the client. In the case where you destroy a pending spawn-predicted object which happen to be spawned on the server later on, that object would be re-created on the client. Notes: Netick does not destroy spawn-predicted objects on the client which weren’t spawned on the server. You must destroy them yourself. Netick would only call NetworkStart once for the spawn-predicted object on the client, and it’s when the client spawns it. It won’t be called when the object has been confirmed. Instead, you can override OnSpawnPredictionSucceeded for that. Netick automatically destroys all pending spawn-predicted (yet to be confirmed) network objects when input loss occurs on the client. Check out the Bomberman sample to see the usage of Spawn-Prediction on the Bomb prefab.\\ Spawn-Prediction Example public override void NetworkFixedUpdate() { if (FetchInput(out BombermanInput input)) { if (!IsResimulating && input.PlantBomb) { var spawnKey = new SpawnPredictionKey((byte)Sandbox.Tick.TickValue, (byte)InputSource.PlayerId); Sandbox.NetworkInstantiate(_bombPrefab, Round(transform.position), Quaternion.identity, spawnPredictionKey: spawnKey); } } }"
  },
  "articles/network-object-instantiation-and-destruction/network-prefab-pool.html": {
    "href": "articles/network-object-instantiation-and-destruction/network-prefab-pool.html",
    "title": "Network Prefab Pool | Netick Networking Engine",
    "keywords": "Network Prefab Pool Object pooling is a very effective technique to avoid run-time allocations (and thus, improve performance), by creating a pool of objects of the same type, at the start of the game. So that when you want to instantiate a certain prefab, you will not create a new object in memory. But rather, all instances of that prefab are already created, and you simply grab one out of the pool and initialize it. And when you want to destroy an instance, instead of removing it from memory (which causes GC), you put it back on the pool – recycling it. Pooling is extremely useful and effective if you have a prefab in your game that you instantiate and destroy repeatedly. For instance, the bomb in Bomberman. Netick has a built-in pooling system that you can use. By default, all prefabs are not pooled. To enable pooling for a certain prefab, you must call InitializePool (must be called at the start of Netick in NetworkEventsListner) on that prefab and pass it the initial amount to create:\\ public override void OnStartup(NetworkSandbox sandbox) { var bombPrefab = sandbox.GetPrefab(\"Bomb\"); sandbox.InitializePool(bombPrefab, 5); } Note Check out the Bomberman sample if you are confused. It demonstrates pooling of the bomb prefab. And if this amount happens to be exceeded, Netick will simply create more objects in the pool automatically. And you don’t need to use special instantiate or destroy methods to deal with pooled prefabs, it all works through the same Sandbox.NetworkInstantiate and Sandbox.Destroy methods. Although you still need to reset your objects. However, Netick automatically resets all network properties to their declaration values. Resetting Prefab Instances To reset your object, override NetworkReset on your class inheriting from NetworkBehaviour: public override void NetworkReset() { // reset all non-networked state which need to be reset so that your object is ready to be used again }"
  },
  "articles/network-state.html": {
    "href": "articles/network-state.html",
    "title": "Network State | Netick Networking Engine",
    "keywords": "Network State Network Property A Network Property is a C# property which is replicated across the network. For a property to be networked, the Attribute [Networked] must be added to it. An example of a networked property: [Networked] public int Health {get; set;} Supported C# Types Int/UInt Float Bool String Enums Byte Long/ULong Double Supported Unity Types: Vector2 Vector3 Quaternion Color Network Arrays Network arrays are just like regular C# arrays, but their syntax is a bit different. They are defined using the NetworkArray generic class. Example of a network array: [Networked (size: 10)] public NetworkArray Items { get; set; } Custom Networked Structs You can define custom structs that can be networked/replicated by adding the attribute [Networked] to them, like this: [Networked] public struct Inventory { public int Item1; public int Item2; } Important notes: Note It’s important to make sure that a single struct doesn’t exceed the maximum property size, which is 50 bytes. Note Structs must not include other user-defined networked structs, only C#’s and Unity’s primitive types. Note You might want to override/implement equality for the struct for better performance."
  },
  "articles/parenting.html": {
    "href": "articles/parenting.html",
    "title": "Parenting | Netick Networking Engine",
    "keywords": "Parenting The parent of a network object can only be changed if you are the Input Source of the object, or if you are the owner (server). To change the parent of an object, call SetParent on it: Object.SetParent(newParent); Caution The original hierarchy of network prefab instances shouldn’t be changed at run-time. In other words, you shouldn’t unparent the original children of a prefab. Although, you can parent objects to them, just not unparenting them (prefab children) from their original parent."
  },
  "articles/remote-procedure-calls-rpcs.html": {
    "href": "articles/remote-procedure-calls-rpcs.html",
    "title": "Remote Procedure Calls (RPCs) | Netick Networking Engine",
    "keywords": "Remote Procedure Calls (RPCs) RPCs are method calls on Network Behaviors that are replicated across the network. They can be used for events or to transfer data. An important use of RPCs is to set up the game and send configuration messages. Use reliable RPCs for things like that. An RPC example: [Rpc(source: RpcPeers.Everyone, target: RpcPeers.InputSource, isReliable: true, localInvoke: false)] private void MyRpc(int arg1) { // Code to be executed } You use the [Rpc] attribute to mark a method as an RPC. Caution RPCs are not called on restimulated ticks. Caution By default all RPCs are unreliable. RPC method constraints: Must have the return type of void. Must only include parameters that can be networked. Same ones as the properties [Rpc] attribute parameters Source: the peer/peers the RPC should be sent from Target: the peer/peers the RPC will be executed on isReliable: whether the RPC is sent reliably or unreliably localInvoke: whether to invoke the RPC locally or not Source and target can be any of the following: Owner (the server) Input Source: the client which is providing inputs for this Network Object Proxies: everyone except the Owner and the Input Source Everyone: the server and every connected client Source Connection of RPCs If you need to know which connection (a client, or the server) the current RPC is being executed from, you can use Sandbox.RpcSource [Rpc(source: RpcPeers.Everyone, target: RpcPeers.InputSource, isReliable: true, localInvoke: false)] private void MyRpc(int arg1) { var rpcSource = Sandbox.RpcSource; }"
  },
  "articles/rpcs-vs-properties.html": {
    "href": "articles/rpcs-vs-properties.html",
    "title": "RPCs vs Properties | Netick Networking Engine",
    "keywords": "RPCs vs Properties RPCs are usually used to replicate non-critical (often visual/cosmetic) events. In contrast, Network Properties are used to replicate critical gameplay state. Network Properties are best when you have a variable that is constantly changing and whose exact value matters for the duration of the game, because properties will eventually replicate to everyone. Example: a health property. On the other hand, RPCs are only relevant at the time of their execution, meaning anyone joining after that will never know anything about any RPCs before it. Example: a damage effect event. If an event happens infrequently and is merely visual (doesn’t affect gameplay, for example, a sound effect event) it might be more appropriate to use a Remote Procedure Call (RPC) for it. Often you can evade using RPCs even for events, and that’s by using a change callback using [OnChanged] attribute."
  },
  "articles/script-execution-order.html": {
    "href": "articles/script-execution-order.html",
    "title": "Script Execution Order | Netick Networking Engine",
    "keywords": "Script Execution Order The network methods on your Network Behavior classes are called from inside Netick, which means standard Unity MonoBehaviour script order control does not work here. To specify the order of execution for classes inheriting from Network Behavior, use the attributes: [ExecuteAfter(typeof(SomeOtherScript))] /* to specify that this script executes after SomeOtherScript) */ [ExecuteBefore(typeof(SomeOtherScript))] /* to specify that this script executes before SomeOtherScript */ Example: [ExecuteAfter(typeof(SomeOtherScript))] public class BomberController : NetworkBehaviour { // ... }"
  },
  "articles/understanding-client-side-prediction/README.html": {
    "href": "articles/understanding-client-side-prediction/README.html",
    "title": "Understanding Client-Side Prediction | Netick Networking Engine",
    "keywords": "Understanding Client-Side Prediction In the Client-Server model, to be able to change the state (values of properties/arrays) of a network object, that change must be authoritatively done on the server. This is to ensure a secure and cheat-free gameplay experience, because ultimately the client’s executable can be tampered with or modified. Only the server can ever change the true state of network variables. What the client does to affect changes to the networked state is send inputs which are later executed/simulated by the server to produce the desired state which is sent back to the client/s. This is obviously not practical due to internet latency (round-trip time), as the latency increases, input delay increases. This will, without a doubt, lead to a very unpleasant and unresponsive gameplay experience. The solution to this is what’s commonly known as Client-Side Prediction. Client-Side Prediction basically means that the client, instead of waiting for the server to simulate its inputs and send the resultant states to it, the client executes them locally (in other words, predicts their outcome), and when the resultant state comes in, it applies that state and resimulate every input of a tick newer than that state’s tick. All this happens in one tick. This ensures that the server still has the final say on the authority of the game (because, eventually, the client will overwrite its local state with whatever the server says), but at the same time allows the client to locally predict their input outcome and enjoy a lag-free experience. All simulation code must be done inside NetworkFixedUpdate on Network Behaviors. This method is called every network tick to step forward the simulation. On the server, this method is only called for new inputs. While on the client, it can and will be called several times in one network tick to resimulate all saved inputs (up to the current predicted tick) when applying the incoming server state. See the previous figure to fully understand this. On what objects do resimulations happen? Objects the client is the Input Source for. Objects which has their Prediction Mode set to Everyone, instead of Input Source. Meaning not only the client who’s the Input Source predict them, but all other clients too. For other objects, it will only be called once for every network step/tick. Don’t forget that the server only ever simulates new ticks, it never resimulates previous ticks/inputs. CSP is exclusive to clients. To the server, it’s just like it’s a single-player game. For movement code, being aware of resimulations is unimportant. However, for things like shooting and other similar events, it’s vital to make sure that they only happen when the input is being simulated for the first time ever, otherwise, you would shoot several times for one bullet on the client, due to resimulations. This hazard is important to understand and deal with. Note that it’s usually impractical to predict everything the client does in the game, and it’s sometimes way easier to not let the client predict some stuff (due to the complexity that is associated with correcting some predictions), and wait for the server state. And for other things, simply making them client-authoritative saves a lot of headaches. You don’t have to make the game completely server-authoritative. Only the bits which are vital to the game experience."
  },
  "articles/understanding-client-side-prediction/writing-client-side-prediction-code.html": {
    "href": "articles/understanding-client-side-prediction/writing-client-side-prediction-code.html",
    "title": "Writing Client-Side Prediction code | Netick Networking Engine",
    "keywords": "Writing Client-Side Prediction code Network Input Network Input describes what the player wants to do, which will be used to simulate the state of objects they want to control. This ensures that the client can’t directly change the state – the change happens by executing the input, which, even if tampered with, won’t be game-breaking. Defining Inputs To define a new input, create a class that inherits from NetworkInput: public class MyInput : NetworkInput { public bool ShootInput; public float MoveDirX, MoveDirY; } Setting Inputs To set the variables of an input, you first need to acquire the input object of the next tick, using Sandbox.GetInput. Then, you can set it inside NetworkUpdate on NetworkBehaviour: public override void NetworkUpdate() { var input = Sandbox.GetInput<MyInput>(); input.MoveDirX = Input.GetAxis(\"Horizontal\"); input.MoveDirY = Input.GetAxis(\"Vertical\"); } You could also set them on OnInput of NetworkEventsListner, which is preferred. Simulating/Executing Inputs To drive the gameplay based on the input object, you must do that in NetworkFixedUpdate: public override void NetworkFixedUpdate() { if (FetchInput(out MyInput input)) { // movement var movement = transform.TransformVector(new Vector3(input.MoveDirX, 0, input.MoveDirY)) * Speed; movement.y = 0; _CC.Move(movement * Time.fixedDeltaTime); // shooting if (input.ShootInput == true && !IsResimulating) Shot(); } } Warning Sandbox.GetInput is used to read/set the user inputs into the input object. Warning FetchInput is used to actually use the input object in the simulation. FetchInput tries to fetch an input for the state/tick being simulated/resimulated. It only returns true if either: We are providing inputs to this object – meaning we are the Input Source of the object. We are the owner (the server) of this object – receiving inputs from the client who’s the Input Source. And only if we have an input for the current tick being simulated. If not, it would return false. Usually, that happens due to packet loss. And to avoid the previous issue we talked about, we make sure that we are only shooting if we are simulating a new input, by checking IsResimulating. Input Source For a client to be able to provide inputs to be used in an Object’s NetworkFixedUpdate, and hence take control of it, that client must be the Input Source of that object. Otherwise, FetchInput will return false. To check if you are the Input Source, use IsInputSource. The server can also be the Input Source of objects, although it won’t do any CSP, since it needs not to, after all, it’s the server. You can set the Input Source of an object when instantiating it: sandbox.NetworkInstantiate(PlayerPrefab, spawnPos, Quaternion.identity, client); To set/remove the Input Source (must only be called on the server): Call PermitInput to set the Input Source of the object: Object.PermitInput(client); Call RevokeInput to remove the Input Source of the object: Object.RevokeInput(); There are several methods you can override to run code when Input Source is assigned/removed or has left: OnInputPermitted: called on the player who was given permission to provide inputs to this object. OnInputRevoked: called on the player whose permission to provide inputs to this object has been revoked by the owner (server). OnInputSourceLeft: called on the owner (server) when the Input Source client has left the game."
  },
  "articles/understanding-eventual-consistency.html": {
    "href": "articles/understanding-eventual-consistency.html",
    "title": "Understanding Eventual Consistency | Netick Networking Engine",
    "keywords": "Understanding Eventual Consistency Eventual Consistency is a replication method employed by Netick for syncing network state. In Netick, Eventual Consistency means that the network state (network properties) of every object will eventually be consistent between the client and the server, but not necessarily immediately. Meaning that the final value of each property on the client will eventually be consistent (the same) with the value on the server. But, due to packet loss, when one or more packets are lost that contain updates to some network state, this will lead the client to miss some updates to those properties in the lost packets, which will be resent in future packets. So, the client is not guaranteed to receive all updates to the network state in every packet. To understand this more clearly, let’s explore an example. Assume there are two properties: Ammo Health Now, let’s look at what happens within each tick: Server: Tick 0: no changes Tick 1: Ammo value changed to 5 Tick 2: Health value changed to 50, Ammo value changed to 4 Tick 3: Ammo value changed to 3 Tick 4: no changes Client: Tick 0: Tick 1: Ammo value 5 received Tick 2: The packet got lost Tick 3: Ammo value 3 received Tick 4: Health value 50 received As you can see, there is no guarantee that both Health and Ammo values will be received at the same tick. But, they are guaranteed to be eventually consistent with the server values."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Netick Networking Engine",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}