### YamlMime:ManagedReference
items:
- uid: Netick.CircularList`1
  commentId: T:Netick.CircularList`1
  id: CircularList`1
  parent: Netick
  children:
  - Netick.CircularList`1.#ctor(System.Int32)
  - Netick.CircularList`1.Add(`0)
  - Netick.CircularList`1.Capacity
  - Netick.CircularList`1.Clear
  - Netick.CircularList`1.Count
  - Netick.CircularList`1.GetArray
  - Netick.CircularList`1.HeadIndex
  - Netick.CircularList`1.Item(System.Int32)
  - Netick.CircularList`1.Reset(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: CircularList<T>
  nameWithType: CircularList<T>
  fullName: Netick.CircularList<T>
  type: Class
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public class CircularList<T>
    typeParameters:
    - id: T
    content.vb: Public Class CircularList(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: CircularList(Of T)
  fullName.vb: Netick.CircularList(Of T)
  name.vb: CircularList(Of T)
- uid: Netick.CircularList`1.#ctor(System.Int32)
  commentId: M:Netick.CircularList`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: CircularList(int)
  nameWithType: CircularList<T>.CircularList(int)
  fullName: Netick.CircularList<T>.CircularList(int)
  type: Constructor
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public CircularList(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
    content.vb: Public Sub New(capacity As Integer)
  overload: Netick.CircularList`1.#ctor*
  nameWithType.vb: CircularList(Of T).New(Integer)
  fullName.vb: Netick.CircularList(Of T).New(Integer)
  name.vb: New(Integer)
- uid: Netick.CircularList`1.Add(`0)
  commentId: M:Netick.CircularList`1.Add(`0)
  id: Add(`0)
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: CircularList<T>.Add(T)
  fullName: Netick.CircularList<T>.Add(T)
  type: Method
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Add(item As T)
  overload: Netick.CircularList`1.Add*
  nameWithType.vb: CircularList(Of T).Add(T)
  fullName.vb: Netick.CircularList(Of T).Add(T)
- uid: Netick.CircularList`1.Clear
  commentId: M:Netick.CircularList`1.Clear
  id: Clear
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: CircularList<T>.Clear()
  fullName: Netick.CircularList<T>.Clear()
  type: Method
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Netick.CircularList`1.Clear*
  nameWithType.vb: CircularList(Of T).Clear()
  fullName.vb: Netick.CircularList(Of T).Clear()
- uid: Netick.CircularList`1.GetArray
  commentId: M:Netick.CircularList`1.GetArray
  id: GetArray
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: GetArray()
  nameWithType: CircularList<T>.GetArray()
  fullName: Netick.CircularList<T>.GetArray()
  type: Method
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public T[] GetArray()
    return:
      type: '{T}[]'
    content.vb: Public Function GetArray() As T()
  overload: Netick.CircularList`1.GetArray*
  nameWithType.vb: CircularList(Of T).GetArray()
  fullName.vb: Netick.CircularList(Of T).GetArray()
- uid: Netick.CircularList`1.Reset(System.Int32,System.Int32)
  commentId: M:Netick.CircularList`1.Reset(System.Int32,System.Int32)
  id: Reset(System.Int32,System.Int32)
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: Reset(int, int)
  nameWithType: CircularList<T>.Reset(int, int)
  fullName: Netick.CircularList<T>.Reset(int, int)
  type: Method
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public void Reset(int headIndex, int count)
    parameters:
    - id: headIndex
      type: System.Int32
    - id: count
      type: System.Int32
    content.vb: Public Sub Reset(headIndex As Integer, count As Integer)
  overload: Netick.CircularList`1.Reset*
  nameWithType.vb: CircularList(Of T).Reset(Integer, Integer)
  fullName.vb: Netick.CircularList(Of T).Reset(Integer, Integer)
  name.vb: Reset(Integer, Integer)
- uid: Netick.CircularList`1.Capacity
  commentId: P:Netick.CircularList`1.Capacity
  id: Capacity
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: CircularList<T>.Capacity
  fullName: Netick.CircularList<T>.Capacity
  type: Property
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public int Capacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Capacity As Integer
  overload: Netick.CircularList`1.Capacity*
  nameWithType.vb: CircularList(Of T).Capacity
  fullName.vb: Netick.CircularList(Of T).Capacity
- uid: Netick.CircularList`1.Count
  commentId: P:Netick.CircularList`1.Count
  id: Count
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CircularList<T>.Count
  fullName: Netick.CircularList<T>.Count
  type: Property
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Netick.CircularList`1.Count*
  nameWithType.vb: CircularList(Of T).Count
  fullName.vb: Netick.CircularList(Of T).Count
- uid: Netick.CircularList`1.Item(System.Int32)
  commentId: P:Netick.CircularList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: CircularList<T>.this[int]
  fullName: Netick.CircularList<T>.this[int]
  type: Property
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public T this[int i] { get; set; }
    parameters:
    - id: i
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public Default Property this[](i As Integer) As T
  overload: Netick.CircularList`1.Item*
  nameWithType.vb: CircularList(Of T).this[](Integer)
  fullName.vb: Netick.CircularList(Of T).this[](Integer)
  name.vb: this[](Integer)
- uid: Netick.CircularList`1.HeadIndex
  commentId: P:Netick.CircularList`1.HeadIndex
  id: HeadIndex
  parent: Netick.CircularList`1
  langs:
  - csharp
  - vb
  name: HeadIndex
  nameWithType: CircularList<T>.HeadIndex
  fullName: Netick.CircularList<T>.HeadIndex
  type: Property
  assemblies:
  - Netick
  namespace: Netick
  syntax:
    content: public int HeadIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property HeadIndex As Integer
  overload: Netick.CircularList`1.HeadIndex*
  nameWithType.vb: CircularList(Of T).HeadIndex
  fullName.vb: Netick.CircularList(Of T).HeadIndex
references:
- uid: Netick
  commentId: N:Netick
  isExternal: true
  href: Netick.html
  name: Netick
  nameWithType: Netick
  fullName: Netick
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Netick.CircularList`1.#ctor*
  commentId: Overload:Netick.CircularList`1.#ctor
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1__ctor_System_Int32_
  name: CircularList
  nameWithType: CircularList<T>.CircularList
  fullName: Netick.CircularList<T>.CircularList
  nameWithType.vb: CircularList(Of T).New
  fullName.vb: Netick.CircularList(Of T).New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Netick.CircularList`1.Add*
  commentId: Overload:Netick.CircularList`1.Add
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_Add__0_
  name: Add
  nameWithType: CircularList<T>.Add
  fullName: Netick.CircularList<T>.Add
  nameWithType.vb: CircularList(Of T).Add
  fullName.vb: Netick.CircularList(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Netick.CircularList`1.Clear*
  commentId: Overload:Netick.CircularList`1.Clear
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_Clear
  name: Clear
  nameWithType: CircularList<T>.Clear
  fullName: Netick.CircularList<T>.Clear
  nameWithType.vb: CircularList(Of T).Clear
  fullName.vb: Netick.CircularList(Of T).Clear
- uid: Netick.CircularList`1.GetArray*
  commentId: Overload:Netick.CircularList`1.GetArray
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_GetArray
  name: GetArray
  nameWithType: CircularList<T>.GetArray
  fullName: Netick.CircularList<T>.GetArray
  nameWithType.vb: CircularList(Of T).GetArray
  fullName.vb: Netick.CircularList(Of T).GetArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: Netick.CircularList`1.Reset*
  commentId: Overload:Netick.CircularList`1.Reset
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_Reset_System_Int32_System_Int32_
  name: Reset
  nameWithType: CircularList<T>.Reset
  fullName: Netick.CircularList<T>.Reset
  nameWithType.vb: CircularList(Of T).Reset
  fullName.vb: Netick.CircularList(Of T).Reset
- uid: Netick.CircularList`1.Capacity*
  commentId: Overload:Netick.CircularList`1.Capacity
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_Capacity
  name: Capacity
  nameWithType: CircularList<T>.Capacity
  fullName: Netick.CircularList<T>.Capacity
  nameWithType.vb: CircularList(Of T).Capacity
  fullName.vb: Netick.CircularList(Of T).Capacity
- uid: Netick.CircularList`1.Count*
  commentId: Overload:Netick.CircularList`1.Count
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_Count
  name: Count
  nameWithType: CircularList<T>.Count
  fullName: Netick.CircularList<T>.Count
  nameWithType.vb: CircularList(Of T).Count
  fullName.vb: Netick.CircularList(Of T).Count
- uid: Netick.CircularList`1.Item*
  commentId: Overload:Netick.CircularList`1.Item
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_Item_System_Int32_
  name: this
  nameWithType: CircularList<T>.this
  fullName: Netick.CircularList<T>.this
  nameWithType.vb: CircularList(Of T).this[]
  fullName.vb: Netick.CircularList(Of T).this[]
  name.vb: this[]
- uid: Netick.CircularList`1.HeadIndex*
  commentId: Overload:Netick.CircularList`1.HeadIndex
  isExternal: true
  href: Netick.CircularList-1.html#Netick_CircularList_1_HeadIndex
  name: HeadIndex
  nameWithType: CircularList<T>.HeadIndex
  fullName: Netick.CircularList<T>.HeadIndex
  nameWithType.vb: CircularList(Of T).HeadIndex
  fullName.vb: Netick.CircularList(Of T).HeadIndex
